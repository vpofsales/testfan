Below is the updated script with the necessary corrections based on the `Full trait breakdown.txt` information. The corrections are made in the `getBackground`, `getSkinTone`, `getEyeColor`, `getHairStyle`, `getShoeStyle`, and `getAccessory` methods.

```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>DMT Viewer Refactored</title>
    <style>
      body {
        font-family: Arial, sans-serif;
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
      }
      #output {
        margin-top: 20px;
      }
    </style>
  </head>
  <body>
    <h1>DMT Viewer</h1>
    <input type="number" id="blockNumber" placeholder="Enter block number" />
    <button id="generateButton">Generate DMT</button>
    <div id="output"></div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/svg.js/3.1.1/svg.min.js"></script>
    <script>
      class BlockDataParser {
        constructor(rawBlockData) {
          this.rawData = rawBlockData;
        }

        parse() {
          return {
            height: this.rawData.height,
            time: new Date(this.rawData.time * 1000),
            reward: this.calculateBlockReward(),
            weight: this.rawData.size, // Using size as weight
            hash: this.rawData.hash,
            txCount: this.rawData.n_tx,
            nonce: this.rawData.nonce,
            bits: this.convertBitsToHex(this.rawData.bits)
          };
        }

        calculateBlockReward() {
          const halvings = Math.floor(this.rawData.height / 210000);
          return 50 * Math.pow(0.5, halvings) * 100000000; // in satoshis
        }

        convertBitsToHex(bits) {
          // Convert the decimal bits to hexadecimal
          return '0x' + bits.toString(16).padStart(8, '0');
        }
      }

      class TraitManager {
        constructor(blockData) {
          this.blockData = blockData;
          this.traits = {};
        }

        determineTraits() {
          this.traits.outline = this.determineOutline();
          this.traits.skinTone = this.getSkinTone();
          this.traits.eyeColor = this.getEyeColor();
          this.traits.hairStyle = this.getHairStyle();
          this.traits.shirtType = this.getShirtType();
          this.traits.shirtColor = this.getShirtColor();
          this.traits.pantsColor = this.getPantsColor();
          this.traits.shoeType = this.getShoeStyle();
          this.traits.accessory = this.getAccessory();
          this.traits.background = this.getBackground();
          this.traits.saiyanHead = this.getSaiyanTrait();
          this.traits.natmanHead = this.getNatmanTrait();
          this.traits.natmanBody = this.getNatmanBody();
          this.traits.shirtLogo = this.getShirtLogo();

          this.traits.headwearStyle = this.getHeadwearStyle();
          this.traits.eyewearStyle = this.getEyewear();
          this.traits.heldItem = this.getHeldItem();
          this.traits.rareClothing = this.getRareClothing();
          this.traits.glow = this.getGlowType();

          if (this.traits.eyewearStyle) {
            this.traits.eyeColor = null;
          }

          this.checkSpecialModes();
          this.checkRareTraits();
          this.resolveTraitConflicts();

          this.checkHeadwearConflicts();
        }

        getBackground() {
          const nonceString = this.blockData.nonce.toString().split('').reverse().join('');
          const D1 = nonceString[0] || '0'; // Correct D1 calculation
          return D1;
        }

        determineOutline() {
          if (this.blockData.height % 17 === 0) {
            return "armOut";
          }
          if (this.blockData.reward > 300000000) {
            if (this.blockData.nonce.toString()[5] === '3' || this.blockData.nonce.toString()[5] === '8') {
              return "femaleHeel";
            }
            return "female";
          }
          if (this.blockData.hash.includes("00000000000000000000")) {
            return "mermaid";
          }
          return "base";
        }

        getSkinTone() {
          const skinTones = {
            '0': '#9781ac', '1': '#89ac81', '2': '#81a3ac', '3': '#a4905f',
            '4': '#ca6d6c', '5': '#b3b3b3', '6': '#a4905f', '7': '#81a3ac',
            '8': '#89ac81', '9': '#9781ac'
          };

          if (this.blockData.height % 77 === 0) {
            return '#24bd57'; // Pepe Skin
          } else if (/^7+$/.test(this.blockData.height.toString())) {
            return '#b9f2ff'; // Diamond Skin
          }

          const digit = this.blockData.nonce.toString().slice(-1);
          return skinTones[digit] || '#b3b3b3';
        }

        getEyeColor() {
          const eyeColors = {
            '0': '#000000', '1': '#3377cb', '2': '#4b2c14', '3': '#3ba034',
            '4': '#22b6c0', '5': '#eda221', '6': '#f5a8b5', '7': '#dc3bc7',
            '8': '#dcd86b', '9': '#dcd86b'
          };
          const nonceString = this.blockData.nonce.toString().split('').reverse().join('');
          const digit = nonceString[1];
          return eyeColors[digit] || '#000000';
        }

        getHairStyle() {
          const nonceString = this.blockData.nonce.toString().split('').reverse().join('');
          const digit = nonceString[2];

          const hairStyles = {
            base: {
              '0': 'Long Black', '1': 'Long Blonde', '2': 'Long Brown', '3': 'Long Red',
              '4': 'Medium Black', '5': 'Medium Blonde', '6': 'Medium Brown',
              '7': 'Short Black', '8': 'Short Blonde', '9': 'Short Brown'
            },
            female: {
              '0': 'Long Black', '1': 'Long Blonde', '2': 'Long Brown', '3': 'Long Red',
              '4': 'Ponytail Black', '5': 'Ponytail Blonde', '6': 'Ponytail Brown', '7': 'Ponytail Red',
              '8': 'Short Blue', '9': 'Short Red'
            },
            mermaid: {
              '0': 'Ponytail Black', '1': 'Ponytail Blonde', '2': 'Ponytail Brown', '3': 'Ponytail Red',
              '4': 'Ponytail Black', '5': 'Ponytail Blonde', '6': 'Ponytail Brown', '7': 'Ponytail Dark Red',
              '8': 'Ponytail Blue', '9': 'Ponytail Purple'
            }
          };

          if (this.traits.outline === 'mermaid') {
            return hairStyles.mermaid[digit];
          } else if (this.traits.outline.startsWith('female')) {
            return hairStyles.female[digit];
          } else {
            return hairStyles.base[digit];
          }
        }

        getShirtType() {
          const d4 = parseInt(this.blockData.nonce.toString().split('').reverse()[3], 10);

          if (this.traits.outline === "armOut") {
            return "Long Sleeve";
          }

          if (this.traits.outline.startsWith("female")) {
            if ([0, 2, 8].includes(d4)) return "Dress";
            if ([1, 6, 9].includes(d4)) return "Dress Shirt";
            if ([3, 5].includes(d4)) return "Track Suit";
            if ([4, 7].includes(d4)) return "T-Shirt";
          }

          const baseShirtTypes = [
            "Professional", "Dress Shirt", "Jacket", "Jersey", "Long Sleeve",
            "Plaid", "Open Shirt", "Short Sleeve", "Suit Top", "Vacation Shirt"
          ];
          return baseShirtTypes[d4];
        }

        getShirtColor() {
          const d4 = parseInt(this.blockData.nonce.toString().split('').reverse()[3], 10);
          const d5 = parseInt(this.blockData.nonce.toString().split('').reverse()[4], 10);

          if (this.traits.outline === "armOut") {
            return this.getArmOutShirtColor(d5);
          }

          if (this.traits.outline.startsWith("female")) {
            return this.getFemaleShirtColor(d4, d5);
          }

          return this.getBaseShirtColor(d4, d5);
        }

        getArmOutShirtColor(d5) {
          const colors = [
            "#ecf277", "#d94343", "#a438d2", "#f74ae6", "#e18b09",
            "#6dd363", "#42b5f2", "#747373", "#375eba", "#1d8712"
          ];
          return colors[d5];
        }

        getFemaleShirtColor(d4, d5) {
          if ([0, 2, 8].includes(d4)) {
            const colors = ["#191919", "#6cb5a5", "#ea5eaf", "#395cdb"];
            return colors[Math.floor(d5 / 3)];
          }
          if ([1, 6, 9].includes(d4)) {
            const primaryColors = ["#c84747", "#33afce", "#49b35e", "#fce86b"];
            const secondaryColors = ["#863030", "#1d6273", "#2a6c37", "#ecd960"];
            return {
              primary: primaryColors[Math.floor(d5 / 3)],
              secondary: secondaryColors[Math.floor(d5 / 3)]
            };
          }
          if ([3, 5].includes(d4)) {
            const colors = [
              { primary: "#9f413f", secondary: "#cb6a68" },
              { primary: "#ce861c", secondary: "#dd9a38" },
              { primary: "#2c8c37", secondary: "#3ebb4c" }
            ];
            return colors[Math.floor(d5 / 4)];
          }
          if ([4, 7].includes(d4)) {
            const colors = ["#eaea9e", "#e8e8e8", "#e67acb", "#55e9ec"];
            return colors[Math.floor(d5 / 3)];
          }
        }

        getBaseShirtColor(d4, d5) {
          const colorMaps = {
            0: [ // Professional
              { color1: "#69cb66", color2: "#3a7e38" },
              { color1: "#69cb66", color2: "#3a7e38", hasButtons: true },
              { color1: "#dc8233", color2: "#e27413" },
              { color1: "#dc8233", color2: "#e27413", hasButtons: true },
              { color1: "#82c0f3", color2: "#6fa9d9" },
              { color1: "#82c0f3", color2: "#6fa9d9", hasButtons: true },
              { color1: "#e35959", color2: "#cd3e3e" },
              { color1: "#e35959", color2: "#cd3e3e", hasButtons: true },
              { color1: "#f7e959", color2: "#cac053" },
              { color1: "#000000", color2: "#343131" }
            ],
            1: [ // Dress Shirt
              { shirtColor: "#dae5eb", sleeveEndAndPocketColor: "#ccdadc", tieColor: "#4a749e", endOfTieColor: "#cbcbcb" },
              { shirtColor: "#5ab354", sleeveEndAndPocketColor: "#407e3b", tieColor: "#0da900", endOfTieColor: "#407e3b" },
              { shirtColor: "#5ab354", sleeveEndAndPocketColor: "#407e3b", tieColor: "#ffffff", endOfTieColor: "#cbcbcb" },
              { shirtColor: "#dae5eb", sleeveEndAndPocketColor: "#ccdadc", tieColor: "#ffffff", endOfTieColor: "#cbcbcb" },
              { shirtColor: "#d7a251", sleeveEndAndPocketColor: "#ba812b", tieColor: "#d78203", endOfTieColor: "#b16b02" },
              { shirtColor: "#d7a251", sleeveEndAndPocketColor: "#ba812b", tieColor: "#ffffff", endOfTieColor: "#cbcbcb" },
              { shirtColor: "#d732d7", sleeveEndAndPocketColor: "#b117b1", tieColor: "#9d02b1", endOfTieColor: "#7b028b" },
              { shirtColor: "#d732d7", sleeveEndAndPocketColor: "#b117b1", tieColor: "#ffffff", endOfTieColor: "#cbcbcb" },
              { shirtColor: "#ed4545", sleeveEndAndPocketColor: "#c23838", tieColor: "#cf0000", endOfTieColor: "#c23838" },
              { shirtColor: "#ed4545", sleeveEndAndPocketColor: "#c23838", tieColor: "#ffffff", endOfTieColor: "#cbcbcb" }
            ],
            2: [ // Jacket
              "#343232", "#8f93db", "#00800d", "#fe7e2a", "#f350bd",
              "#9802ba", "#dc0505", "#dcd400", "#dc0505", "#f350bd"
            ],
            3: [ // Jersey
              { color1: "#ffffff", color2: "#000000" },
              { color1: "#ffffff", color2: "#f54653" },
              { color1: "#ffffff", color2: "#de1fd8" },
              { color1: "#1e49cb", color2: "#3eada9" },
              { color1: "#f38405", color2: "#ad6c21" },
              { color1: "#f38405", color2: "#000000" },
              { color1: "#10e9ed", color2: "#ed8610" },
              { color1: "#c20b0b", color2: "#dad130" },
              { color1: "#ede02c", color2: "#375eba" },
              { color1: "#6d0451", color2: "#dad130" }
            ],
            4: [ // Long Sleeve
              "#1d8712", "#747373", "#4de8f9", "#6dd363", "#b77005",
              "#f74ae6", "#7c05af", "#f30000", "#edf768", "#375eba"
            ],
            5: [ // Plaid
              { dark: "#ddd473", light: "#f7e959" },
              { dark: "#f532be", light: "#ff59d0" },
              { dark: "#650289", light: "#ae00ed" },
              { dark: "#4549a9", light: "#6b70f3" },
              { dark: "#c26d18", light: "#da8d40" },
              { dark: "#343131", light: "#4f4d4d" },
              { dark: "#248933", light: "#35c94b" },
              { dark: "#248933", light: "#35c94b", undershirt: "#434343" },
              { dark: "#591712", light: "#6c1e18", undershirt: "#b7a765" },
              { dark: "#4549a9", light: "#6b70f3", undershirt: "#b7a765" }
            ],
            6: [ // Open Shirt
              "#363434", "#321bb1", "#8f93db", "#367c29", "#696464",
              "#cf8b37", "#ed7eeb", "#a713a7", "#d13d3d", "#cbcf5b"
            ],
            7: [ // Short Sleeve (T-Shirt)
              "#f77c00", "#0061a7", "#169e1f", "#c1c1c1", "#23cdcd",
              "#cb8d2a", "#ff3ef9", "#8d08ba", "#ef2020", "#e2da45"
            ],
            8: [ // Suit Top
              { jacket: "#080ebe", tie: "#080ebe" },
              { jacket: "#02a03c", tie: "#888888" },
              { jacket: "#888888", tie: "#080ebe" },
              { jacket: "#888888", tie: "#dc7e04" },
              { jacket: "#8f93db", tie: "#a8a6a5" },
              { jacket: "#dc7e04", tie: "#dc7e04" },
              { jacket: "#fc52f6", tie: "#fc52f6" },
              { jacket: "#8d08ba", tie: "#8d08ba" },
              { jacket: "#e61e1e", tie: "#5252ef" },
              { jacket: "#e61e1e", tie: "#e61e1e" }
            ],
            9: [ // Vacation Shirt
              { baseColor: "#e3f794", undershirt: "#f5c7b9", accent: "#f73333", shirtCollar: "#d2e48a" },
              { baseColor: "#fff64e", undershirt: "#f949eb", accent: "#b89bde", shirtCollar: "#ed8be4" },
              { baseColor: "#0979e2", undershirt: "#93eda5", accent: "#3ce25d", shirtCollar: "#076ecf" },
              { baseColor: "#0979e2", undershirt: "#ff9cbb", accent: "#8fb4d7", shirtCollar: "#076ecf" },
              { baseColor: "#52ed53", undershirt: "#aaf2e7", accent: "#ff9cbb", shirtCollar: "#43d642" },
              { baseColor: "#ed9b21", undershirt: "#e6bd80", accent: "#b89bde", shirtCollar: "#dc8f1d" },
              { baseColor: "#fa93b2", undershirt: "#aaf2e7", accent: "#3cdcc9", shirtCollar: "#3cdcc9" },
              { baseColor: "#b54be2", undershirt: "#adedb6", accent: "#46eb48", shirtCollar: "#41da43" },
              { baseColor: "#f73b3b", undershirt: "#aaf2e7", accent: "#3cdcc9", shirtCollar: "#dc3c3c" },
              { baseColor: "#fff64e", undershirt: "#efea91", accent: "#5239f9", shirtCollar: "#e4dc46" }
            ]
          };

          return colorMaps[d4][d5];
        }

        getPantsColor() {
          const nonceString = this.blockData.nonce.toString().split('').reverse().join('');
          const digit = parseInt(nonceString[3], 10);

          return digit % 2 === 0 ? '#c4b289' : '#5dadec';
        }

        getShoeStyle() {
          const nonceString = this.blockData.nonce.toString().split('').reverse().join('');
          const digit = nonceString[5];

          if (this.traits.outline.startsWith('female')) {
            if (digit === '0' || digit === '5') return 'No Shoes';
            if (digit === '1' || digit === '6') return 'Flats';
            if (digit === '2' || digit === '7') return 'Sandals';
            if (digit === '3' || digit === '8') return 'Heels';
            if (digit === '4' || digit === '9') return 'Converse';
          } else {
            const shoeStyles = {
              '0': 'No Shoes', '1': 'Black & White Shoes', '2': 'Black Top Shoes',
              '3': 'All Black Shoes', '4': 'Converse', '5': 'All Grey Shoes',
              '6': 'House Shoes', '7': 'Red Converse', '8': 'All Red Shoes', '9': 'Slides'
            };
            return shoeStyles[digit];
          }
        }

        getAccessory() {
          const nonceString = this.blockData.nonce.toString().split('').reverse().join('');
          const digit = nonceString[6];

          if (this.traits.outline === 'base') {
            const accessoryStyles = {
              '0': 'None', '1': 'Bracelet Right', '2': 'Earring Bottom',
              '3': 'Earring Top', '4': 'Necklace', '5': 'Ring Left',
              '6': 'Ring Right', '7': 'Watch Left', '8': 'Watch Right', '9': 'Bracelet Left'
            };
            return accessoryStyles[digit];
          }

          if (this.traits.outline === 'base' && this.blockData.txCount === 10) {
            return 'Back Bling';
          }

          if (this.traits.outline.startsWith('female')) {
            if (this.blockData.reward > 300000) {
              if (this.blockData.txCount > 3000) {
                return 'Diamond Necklace';
              } else if (this.blockData.weight < 350000) {
                return 'Pearls';
              }
            }
            if (this.blockData.reward >= 300000 && this.blockData.reward < 350000) {
              return 'Diamond Earrings';
            } else if (this.blockData.reward >= 350000 && this.blockData.reward < 400000) {
              return 'Silver Earrings';
            } else if (this.blockData.reward >= 400000) {
              return 'Gold Earrings';
            }
          }

          return 'None';
        }

        checkSpecialModes() {
          this.traits.saiyanMode = this.blockData.time.toTimeString().includes("1:23");
          this.traits.natmanMode = this.blockData.weight >= 140 && this.blockData.weight <= 150;
        }

        checkRareTraits() {
          if (this.blockData.height % 77 === 0) {
            this.traits.skinTone = '#24bd57';
            this.traits.mouth = 'PepeMouth';
          }

          if (/^7+$/.test(this.blockData.height.toString())) {
            this.traits.skinTone = '#b9f2ff';
          }

          if (this.blockData.bits.includes("3b")) this.traits.background = "Beach";
          if (this.blockData.bits.includes("7b")) this.traits.background = "Space";
          if (this.blockData.bits.includes("8b")) this.traits.background = "Bitmap";
          if (this.blockData.bits.includes("9b")) this.traits.background = "Clouds";
          if (this.blockData.bits.includes("101")) this.traits.background = "XP";

          if (this.traits.outline === "base") {
            if (this.blockData.nonce.includes("7777")) {
              this.traits.rareClothing = "TrackSuit";
            }
            if (this.traits.shirtType === "Long Sleeve" && this.blockData.txCount === 4 && this.blockData.nonce.toString().slice(-2) === "55") {
              this.traits.rareClothing = "Prisoner";
            }
            if (this.traits.shirtType === "Plaid" && this.blockData.txCount === 5 && this.blockData.nonce.toString().slice(-2) === "51") {
              this.traits.rareClothing = "Science";
            }
          }
        }

        getHeadwearStyle() {
          const blockWeight = this.blockData.weight;
          const nonceString = this.blockData.nonce.toString();
          const outline = this.traits.outline;
          const hairStyle = this.traits.hairStyle;

          if (outline !== 'base' && outline !== 'arm out') {
            return null;
          }

          if (hairStyle === 'Long' && (outline === 'arm out' || outline === 'base')) {
            return null;
          }

          if (nonceString.includes('9999')) {
            return 'Diamond NodeMonke Hat';
          } else if (nonceString.includes('111')) {
            return 'NodeMonke Hat';
          } else if (nonceString.includes('777')) {
            return 'Backwards Diamond Hat';
          } else if (nonceString.includes('333')) {
            return 'Backwards Single Hat';
          } else if (nonceString.includes('888') && outline === 'arm out') {
            return 'Backwards Multi Hat';
          } else if (blockWeight < 850) {
            return 'Cowboy Hat';
          } else if (blockWeight >= 1000 && blockWeight < 2000) {
            return 'Hufflepuff Hat';
          } else if (blockWeight >= 2000 && blockWeight < 10000) {
            return 'Ravenclaw Hat';
          } else if (blockWeight >= 10000 && blockWeight < 15000) {
            return 'Slytherin Hat';
          } else if (blockWeight >= 15000 && blockWeight < 27000) {
            return 'Gryffindor Hat';
          }

          return null;
        }

        checkHeadwearConflicts() {
          const hairStyle = this.traits.hairStyle;
          const headwearStyle = this.traits.headwearStyle;

          if (hairStyle === 'Long' && (headwearStyle === 'Backwards Single Hat' || headwearStyle === 'Backwards Diamond Hat' || headwearStyle === 'Backwards Multi Hat')) {
            this.traits.headwearStyle = null;
          }
        }

        getEyewear() {
          const bits = this.blockData.bits.toLowerCase();

          if (bits.includes("22")) {
            return "Cyclops Red Black";
          } else if (bits.includes("23")) {
            return "Cyclops Grey Gold";
          } else if (bits.includes("3d")) {
            return "3D Glasses";
          } else if (bits.includes("fa")) {
            return "Hollow White Eyes";
          } else if (bits.includes("0a")) {
            return "Hollow Black Eyes";
          }

          return null;
        }

        getHeldItem() {
          const outline = this.traits.outline;
          const txCount = this.blockData.txCount;

          if (outline !== 'armOut') {
            return null;
          }

          if (txCount > 5000) {
            return 'Bitmap Map';
          } else if (txCount >= 3000 && txCount <= 5000) {
            return 'Gold Sweeper';
          } else if (txCount >= 2000 && txCount < 3000) {
            return 'Sweeper';
          } else if (txCount >= 1000 && txCount < 2000) {
            return 'BTC Staff';
          } else if (txCount >= 501 && txCount < 1000) {
            return 'Silver Sweeper';
          } else if (txCount >= 251 && txCount < 500) {
            return 'Lucielle';
          } else if (txCount >= 101 && txCount < 250) {
            return 'ShitCoin';
          } else if (txCount >= 25 && txCount < 100) {
            return 'Silver Staff';
          } else if (txCount >= 11 && txCount < 25) {
            return 'Diamond Staff';
          } else if (txCount >= 2 && txCount <= 10) {
            return 'Gold Staff';
          }

          return null;
        }

        getGlowType() {
          const blockTime = new Date(this.blockData.time);
          const hours = blockTime.getHours();
          const minutes = blockTime.getMinutes();

          if (this.traits.outline === "base" || this.traits.outline === "armOut") {
            const isLongHair = this.traits.hairStyle.includes("Long");

            if (hours === 22) {
              return isLongHair ? "greenGlow2" : "greenGlow";
            } else if (hours === 1) {
              return isLongHair ? "blueGlow2" : "blueGlow";
            } else if (hours === 23 && (minutes === 18 || minutes === 19)) {
              return isLongHair ? "fireGlow2" : "fireGlow";
            } else if (hours === 23 && minutes === 23) {
              return isLongHair ? "diamondGlow2" : "diamondGlow";
            }
          } else if (this.traits.outline.startsWith("female") && this.blockData.bits.includes("1f")) {
            return this.traits.hairStyle.includes("Ponytail") ? "pinkGlow2" : "pinkGlow";
          }

          return null;
        }

        getMouthType() {
          const blockDate = new Date(this.blockData.time);
          const month = blockDate.getMonth() + 1;
          const day = blockDate.getDate();

          if (this.traits.outline === "base" || this.traits.outline === "armOut") {
            if (month === 4 && day === 20) {
              return "blunt";
            } else if (day === 20) {
              return "cigarette";
            }
            return "regular";
          } else if (this.traits.outline.startsWith("female") || this.traits.outline === "mermaid") {
            if (this.blockData.reward > 300000000 && this.blockData.hash.startsWith("777")) {
              return "smile";
            }
            return "femaleMouth";
          }

          return "regular";
        }

        getSaiyanTrait() {
          const blockTime = new Date(this.blockData.time);
          return blockTime.getHours() === 1 && blockTime.getMinutes() === 23;
        }

        getNatmanTrait() {
          return this.blockData.weight >= 140 && this.blockData.weight <= 150;
        }

        getNatmanBody() {
          const blockDate = new Date(this.blockData.time);
          return blockDate.getFullYear() === 2011 && blockDate.getMonth() === 10 && blockDate.getDate() === 11;
        }

        resolveTraitConflicts() {
          if (this.traits.outline === "mermaid") {
            this.resolveMermaidConflicts();
          } else if (this.traits.outline === "base" || this.traits.outline === "armOut") {
            this.resolveBaseConflicts();
          } else if (this.traits.outline.startsWith("female")) {
            this.resolveFemaleConflicts();
          }

          this.resolveCommonConflicts();
        }

        resolveMermaidConflicts() {
          this.traits.shirtType = null;
          this.traits.pantsColor = null;
          this.traits.shoeType = null;
          this.traits.accessory = null;
          this.traits.headwear = null;
          this.traits.eyewear = null;
          this.traits.heldItem = null;
          this.traits.rareClothing = null;
        }

        resolveBaseConflicts() {
          if (this.traits.hairStyle.startsWith("Long")) {
            if (["Backwards Single Hat", "Backwards Diamond Hat", "Backwards Multi Hat"].includes(this.traits.headwear)) {
              this.traits.headwear = null;
            }
          }

          if (this.traits.eyewear) {
            this.traits.eyeColor = null;
          }

          if (this.traits.rareClothing) {
            this.traits.shirtType = null;
            this.traits.pantsColor = null;
          }
        }

        resolveFemaleConflicts() {
          if (this.traits.shirtType === "Dress" && this.traits.shoeType !== "Heels" && this.traits.shoeType !== "No Shoes") {
            this.traits.shoeType = "Heels";
          }
        }

        resolveCommonConflicts() {
          if (this.traits.saiyanHead) {
            this.traits.hair = null;
            this.traits.mouth = null;
            this.traits.eyes = null;
            this.traits.headwear = null;
            this.traits.eyewear = null;
            this.traits.glow = null;
            this.traits.backBling = null;
          }

          if (this.traits.natmanHead) {
            this.traits.hair = null;
            this.traits.mouth = null;
            this.traits.eyes = null;
            this.traits.headwear = null;
            this.traits.eyewear = null;
            this.traits.earringTop = null;
            this.traits.earringBottom = null;
            this.traits.necklace = null;
          }

          if (this.traits.natmanBody) {
            this.traits.shirtType = null;
            this.traits.shirtColor = null;
            this.traits.shoes = null;
            this.traits.pantsColor = null;
            this.traits.rareClothing = null;
          }

          if (this.traits.rareAccessory === "Back Bling") {
            this.traits.glow = null;
          }
        }

        getShirtLogo() {
          const outline = this.traits.outline;
          const txCount = this.blockData.txCount;
          const d4 = parseInt(this.blockData.nonce.toString().split('').reverse()[3], 10);

          if (outline === "mermaid") {
            return null;
          }

          if (txCount < 1000) {
            if ((outline === "base" && (d4 === 4 || d4 === 7)) ||
                (outline === "armOut") ||
                (outline.startsWith("female") && (d4 === 0 || d4 === 4 || d4 === 7))) {
              return "BTCMachine";
            }
          } else if (txCount >= 1000 && txCount <= 2000) {
            if ((outline === "base" && (d4 === 4 || d4 === 7)) ||
                (outline.startsWith("female") && (d4 === 0 || d4 === 4 || d4 === 7))) {
              return "Pup";
            }
          }

          return null;
        }

        getRareClothing() {
          if (this.traits.outline === "base") {
            const d4 = parseInt(this.blockData.nonce.toString().split('').reverse()[3], 10);
            const d5 = parseInt(this.blockData.nonce.toString().split('').reverse()[4], 10);
            const txCount = this.blockData.txCount;
            const nonce = this.blockData.nonce;

            if (d4 === 4 && d5 === 5 && txCount < 1000) {
              return "prisoner";
            }
            if (d4 === 5 && d5 === 1 && txCount < 1000) {
              return "science";
            }
            if (nonce.toString().includes('7777')) {
              return "trackSuit";
            }
          } else if (this.traits.outline.startsWith("female")) {
            if (this.blockData.bits === '0x170b98ab') {
              return "morph";
            }
          }
          return null;
        }
      }

      class SVGBuilder {
        constructor(traits) {
          this.traits = traits;
          this.draw = SVG().size(512, 512);
        }

        Sure, let's continue updating the code from the specified section:

```javascript
        generateSVG() {
          this.addBackground();
          this.addOutline();

          if (this.traits.saiyanHead) {
            this.addSaiyanFeatures();
          } else if (this.traits.natmanHead || this.traits.natmanBody) {
            this.addNatmanFeatures();
          } else {
            this.addHair();
            this.addEyes();
            this.addMouth();

            if (this.traits.outline === "mermaid") {
              this.addMermaidTail();
              this.addMermaidShell();
            } else {
              this.addClothing();
              this.addShoes();
              this.addAccessories();
              if (this.traits.outline === "armOut") {
                this.addHeldItem();
              }
              this.addHeadwear();
              this.addEyewear();
            }
          }

          this.addGlow();
          this.addPet();

          return this.draw.svg();
        }

        addBackground() {
          const backgroundColors = {
            "0": "#5c969a", "1": "#90e67f", "2": "#aba0a5", "3": "#aba0a5",
            "4": "#ca90c3", "5": "#f79f46", "6": "#d2d597", "7": "#bb69cd",
            "8": "#e4655b", "9": "#dcd86b"
          };

          const backgroundColor = this.traits.background && backgroundColors[this.traits.background]
            ? backgroundColors[this.traits.background]
            : "#87CEEB";  // Default color if background is not set or invalid

          this.draw.rect(512, 512).fill(backgroundColor);

          if (this.traits.background === "Beach") {
            this.draw.rect(512, 512).fill("#87CEEB");
            this.draw.path("M0,400 Q128,350 256,400 T512,400 V512 H0 Z").fill("#F4A460");
            this.draw.circle(80).center(456, 56).fill("#FFD700");
          } else if (this.traits.background === "Space") {
            this.draw.rect(512, 512).fill("#000033");
            this.addStars();
            this.draw.circle(200).center(256, 256).fill("#1E90FF");
            this.draw.circle(190).center(256, 256).fill("#000033");
          } else if (this.traits.background === "Bitmap") {
            this.draw.rect(512, 512).fill("#000000");
            for (let i = 0; i < 512; i += 16) {
              for (let j = 0; j < 512; j += 16) {
                if (Math.random() > 0.5) {
                  this.draw.rect(16, 16).move(i, j).fill("#FFFFFF");
                }
              }
            }
          } else if (this.traits.background === "Clouds") {
            this.draw.rect(512, 512).fill("#87CEEB");
            this.addClouds();
          } else if (this.traits.background === "XP") {
            this.draw.rect(512, 512).fill("#008080");
            this.draw.rect(512, 30).fill("#000080");
            this.draw.text("My Computer").move(10, 10).font({ fill: '#ffffff', family: 'Arial', size: 14 });
            this.draw.rect(100, 80).move(20, 50).fill("#FFFFFF").stroke("#000000");
            this.draw.text("C:").move(30, 90).font({ fill: '#000000', family: 'Arial', size: 12 });
          }
        }

        addStars() {
          for (let i = 0; i < 100; i++) {
            const x = Math.random() * 512;
            const y = Math.random() * 512;
            const r = Math.random() * 2;
            this.draw.circle(r).center(x, y).fill("#FFFFFF");
          }
        }

        addClouds() {
          for (let i = 0; i < 5; i++) {
            const x = Math.random() * 512;
            const y = Math.random() * 200;
            const group = this.draw.group();
            group.ellipse(60, 40).center(x, y).fill("#FFFFFF");
            group.ellipse(60, 40).center(x + 40, y).fill("#FFFFFF");
            group.ellipse(60, 40).center(x + 80, y).fill("#FFFFFF");
          }
        }

        addOutline() {
          const outlinePaths = {
            base: {
              edge: `<g fill="#000001">
                <path d="M96 496 l0 -16 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -24 0 -24 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0[...]
              </g>`,
              skin: `<g fill="###SKIN_TONE###">
                <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -48 0 -48 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 32 0 32 -24 0 -24 0 0 -40 0 -40 8 0 8 0 0[...]
              </g>`
            },
            armOut: {
              edge: `<g fill="#000001">
                <path d="M96 496 l0 -16 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -24 0 -24 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0[...]
              </g>`,
              skin: `<g fill="###SKIN_TONE###">
                <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -48 0 -48 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 32 0 32 -24 0 -24 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0[...]
              </g>`
            },
            female: {
              edge: `<g fill="#000100">
                <path d="M96 496 l0 -16 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -24 0 -24 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -56 0 -56 8 0 8 0 0[...]
                <path d="M221 331 l0 -8 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -11 0 -11 19 0 19 0 0 8 0 8 8 0 8 0 0 8 0 8 29 0 29 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 11 0 11 0 0 11 0 11 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0[...]
              </g>`,
              skin: `<g fill="###SKIN_TONE###">
                <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -24 0 -24 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0[...]
              </g>`
            },
            femaleHeel: {
              edge: `<g fill="#000100">
                <path d="M96 496 l0 -16 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -24 0 -24 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -56 0 -56 8 0 8 0 0[...]
                <path d="M221 331 l0 -8 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -11 0 -11 19 0 19 0 0 8 0 8 8 0 8 0 0 8 0 8 29 0 29 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 11 0 11 0 0 11 0 11 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0[...]
              </g>`,
              skin: `<g fill="###SKIN_TONE###">
                <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -24 0 -24 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0[...]
              </g>`
            },
            mermaid: {
              edge: `<g fill="#000000">
                <path d="M112 504 l0 -8 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0[...]
                <path d="M221 331 l0 -8 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -11 0 -11 19 0 19 0 0 8 0 8 8 0 8 0 0 8 0 8 29 0 29 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 11 0 11 0 0 11 0 11 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0[...]
              </g>`,
              skin: `<g fill="#ecb597">
                <path d="M240 424 l0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -17.2 0 -17.2 4.3 4.2 4.3 4.2 9.5 0 9.5 0 5.9 -6 c3.3 -3.3 6.4 -6 7 -6 0.6 0 3.7 2.7 7 6 l5.9 6 9.5 0 9.5 0 3.8 -3.7 3.8 -3.7 0 16.7 0[...]
                <path d="M128 368 l0 -32 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -64 0 -64 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 64 0 64 8 0 8 0 0 8 0 8 8 0 8 0 0 32 0 32 -24 0[...]
              </g>`
            }
          };

          const skinTone = this.traits.skinTone;

          if (this.traits.outline === 'mermaid') {
            // For mermaid, we use the provided skin tone path and the edge path
            this.draw.svg(outlinePaths.mermaid.edge);
            this.draw.svg(outlinePaths.mermaid.skin);
            this.addMermaidTail();
            this.addMermaidShell();
          } else {
            // For non-mermaid outlines, we apply the skin tone to both parts
            const coloredEdge = outlinePaths[this.traits.outline].edge.replace(/#000001|#000100|#000000/g, skinTone);
            const coloredSkin = outlinePaths[this.traits.outline].skin.replace('###SKIN_TONE###', skinTone);
            this.draw.svg(coloredEdge + coloredSkin);
          }
        }

        addMermaidTail() {
          const tailColors = this.blockData.height % 2 === 0
            ? { color1: '#157c37', color2: '#24ab4c' }  // Green (even numbers)
            : { color1: '#501d8e', color2: '#7f3cd0' }; // Purple (odd numbers)

          const tailPath1 = `<g fill="${tailColors.color1}">
            <path d="M173 488 c0 -6.4 0.3 -8 1.5 -8 1.2 0 1.5 -1.6 1.5 -8 l0 -8 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 1.2 0 1.5 -1.6 1.5[...]
          </g>`;

          Certainly! Here is the continuation of the code from the specified point:

```javascript
          const tailPath2 = `<g fill="${tailColors.color2}">
            <path d="M112 488 l0 -8 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 16 0 16 0 0 8 0 8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -32 0[...]
            <path d="M224 488 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
            <path d="M288 488 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
            <path d="M240 440 l0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -9.5 0 -9.5 9.5 0 9.5 0 0 8 0 8 8 0 8 0 0 8 0 8 5 0 5 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 9.5 0 9.5 0 0 9.5 0 9.5 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
          </g>`;

          this.draw.svg(tailPath1 + tailPath2);
        }

        addMermaidShell() {
          const lastDigit = parseInt(this.blockData.nonce.toString().slice(-1));
          const shellColor = lastDigit <= 5 ? '#631d95' : '#48c3b1';

          const shellPath = `<g fill="${shellColor}">
            <path d="M210.7 374.2 c-1.5 -1.5 -2.7 -3.6 -2.7 -4.5 0 -1.5 -1.1 -1.7 -8 -1.7 l-8 0 0 -9.5 0 -9.5 8.8 0 c8.5 0 8.9 -0.1 11.7 -3 2.8 -3 3 -3 13.4 -3 l10.5 0 6.1 6 6.1 6 5.9 -6 5.9 -6 10.6 0 c10.5[...]
          </g>`;

          this.draw.svg(shellPath);
        }

        addHair() {
          if (this.traits.outline === 'mermaid') {
            this.addMermaidHair();
          } else {
            const hairStyle = this.traits.hairStyle;
            const hairColor = this.getHairColor(hairStyle);
            const hairPath = this.getHairPath(hairStyle);

            if (hairPath) {
              this.draw.path(hairPath).fill(hairColor);
            }
          }
        }

        getHairColor(hairStyle) {
          if (hairStyle.includes('Black')) return '#202020';
          if (hairStyle.includes('Blonde')) return '#cbb738';
          if (hairStyle.includes('Brown')) return '#644727';
          if (hairStyle.includes('Red')) return '#e48532';
          if (hairStyle.includes('Dark Red')) return '#711818';
          if (hairStyle.includes('Blue')) return '#1f579b';
          if (hairStyle.includes('Purple')) return '#710ca4';
          return '#202020'; // Default to black
        }

        getHairPath(hairStyle) {
          // Define hair paths for different styles and outlines
          const hairPaths = {
            base: {
              Long: "M192 248 l0 -8 -9.5 0 -9.5 0 0 -8 0 -8 9.5 0 9.5 0 0 -24 0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 9.5 0 9.5 0 0 24 0 24 -9.5 0 -9.5 0 0 -8 0 -8 -[...]
              Medium: "M192 216 l0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 -48 0 -48 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 24 0 24 -8 0 -8 0 0 -40z"[...]
              Short: "M192 192 l0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 -48 0 -48 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -24 0 -24 0 0 -16z"
            },
            female: {
              Long: "M320 264 l0 -40 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -16 0 -16 -16 0 -16 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 24 0 24 8 0 8 0 0 -8 0 -8 8 0 8[...]
              Ponytail: "M320 264 l0 -40 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -16 0 -16 -16 0 -16 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 24 0 24 8 0 8 0 0 -8 0 -8 8 0[...]
              Short: "M192 192 l0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 -48 0 -48 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -24 0 -24 0 0 -16z"
            },
            mermaid: {
              Ponytail: "M320 264 l0 -40 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -16 0 -16 -16 0 -16 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 24 0 24 8 0 8 0 0 -8 0 -8 8 0[...]
            }
          };

          const outline = this.traits.outline;
          const baseStyle = hairStyle.split(' ')[0]; // Get the base style (Long, Medium, Short, Ponytail)

          return hairPaths[outline] && hairPaths[outline][baseStyle]
            ? hairPaths[outline][baseStyle]
            : hairPaths.base[baseStyle]; // Fallback to base style if specific outline style not found
        }

        addMermaidHair() {
          const hairStyle = this.traits.hairStyle;
          const hairColor = this.getHairColor(hairStyle);
          const hairPath = this.getHairPath(hairStyle);

          if (hairPath) {
            this.draw.path(hairPath).fill(hairColor);
          }
        }

        addEyes() {
          if (this.traits.eyewear) return; // Don't add eyes if eyewear is present

          const eyeColors = {
            '0': '#000000', '1': '#3377cb', '2': '#4b2c14', '3': '#3ba034',
            '4': '#22b6c0', '5': '#eda221', '6': '#f5a8b5', '7': '#dc3bc7',
            '8': '#dcd86b', '9': '#dcd86b'
          };

          const nonceString = this.blockData.nonce.toString().split('').reverse().join('');
          const digit = nonceString[1];
          const eyeColor = eyeColors[digit] || '#000000';

          
        <g fill="${eyeColor}">
          <path d="M240 273.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.3 0 -1.5 -2.4 -1.5 -16 0 -13.6 0.2 -16 1.5 -16 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.3 2.4 -1.5 16 -1.5 l16 0 0 19 0 19 -16 0 c-13.6 0 -16 -0.2 -16 -1.5z"/>
          <path d="M288 256 l0 -19 8 0 c6.4 0 8 0.3 8 1.5 0 0.8 0.7 1.5 1.5 1.5 1.3 0 1.5 2.4 1.5 16 0 13.6 -0.2 16 -1.5 16 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.6 1.5 -8 1.5 l-8 0 0 -19z"/>
        </g>
        <g fill="#ffffff">
          <path d="M240 280 l0 -8 -8 0 -8 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 16 0 16 0 0 8 0 8 -16 0 -16 0 0 16 0 16 16 0 16 0 0 8 0 8 -16 0 -16 0 0 -8z"/>
          <path d="M288 280 l0 -8 8 0 8 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
        </g>`;
    } else {
      eyePath = `
        <g fill="#ffffff">
          <path d="M272 264 l0 -8 -8 0 -8 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 16 0 16 0 0 9.5 0 9.5 -14.5 0 -14.5 0 0 13 0 13 14.5 0 14.5 0 0 9.5 0 9.5 -16 0 -16 0 0 -8z"/>
          <path d="M320 262.5 l0 -9.5 6.5 0 6.5 0 0 -13 0 -13 -6.5 0 -6.5 0 0 -9.5 0 -9.5 8 0 8 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -9.5z"/>
        </g>
        <g fill="${eyeColor}">
          <path d="M272 240 l0 -16 16 0 16 0 0 16 0 16 -16 0 -16 0 0 -16z"/>
          <path d="M320 240 l0 -16 8 0 8 0 0 16 0 16 -8 0 -8 0 0 -16z"/>
        </g>`;
    }

    this.draw.svg(eyePath);
  }

        addMouth() {
          let mouthPath;
          let mouthColor = "#000000";

          switch (this.traits.mouthType) {
            case "regular":
              mouthPath = "M256 280 l0 -8 24 0 24 0 0 8 0 8 -24 0 -24 0 0 -8z";
              break;
            case "blunt":
              this.addBluntMouth();
              return;
            case "cigarette":
              this.addCigaretteMouth();
              return;
            case "femaleMouth":
              mouthPath = "M240 296 l0 -8 16 0 16 0 0 8 0 8 -16 0 -16 0 0 -8z";
              mouthColor = "#a8534b";
              break;
            case "smile":
              mouthPath = "M240 296 l0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 -16 0 -16 0 0 -8z";
              mouthColor = "#a8534b";
              break;
          }

          this.draw.path(mouthPath).fill(mouthColor);
        }

        addBluntMouth() {
          this.draw.path("M302 282 l0 -4 23 0 23 0 0 4 0 4 -23 0 -23 0 0 -4z").fill("#77623f");
          this.draw.path("M345 282 l0 -4 5.5 0 5.5 0 0 4 0 4 -5.5 0 -5.5 0 0 -4z").fill("#575757");
          this.draw.path("M354 282 c0 -2.2 0.5 -4 1 -4 0.6 0 1 1.8 1 4 0 2.2 -0.4 4 -1 4 -0.5 0 -1 -1.8 -1 -4z").fill("#b77546");
          this.draw.path("M357 275 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z").fill("#575757");
          this.draw.path("M362 270 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z").fill("#575757");
          this.draw.path("M357 265 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z").fill("#575757");
          this.draw.path("M362 260 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z").fill("#575757");
        }

        addCigaretteMouth() {
          this.draw.path("M302 282 l0 -4 8.5 0 8.5 0 0 4 0 4 -8.5 0 -8.5 0 0 -4z").fill("#b9c129");
          this.draw.path("M316 282 l0 -4 16 0 16 0 0 4 0 4 -16 0 -16 0 0 -4z").fill("#f7f7f7");
          this.draw.path("M345 282 l0 -4 5.5 0 5.5 0 0 4 0 4 -5.5 0 -5.5 0 0 -4z").fill("#c35b0c");
          this.draw.path("M357 275 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z").fill("#f7f7f7");
          this.draw.path("M362 270 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z").fill("#f7f7f7");
          this.draw.path("M357 265 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z").fill("#f7f7f7");
          this.draw.path("M362 260 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z").fill("#f7f7f7");
        }

        addClothing() {
          if (this.traits.rareClothing) {
            this.addRareClothing();
          } else {
            const shirtType = this.traits.shirtType;
            const shirtColor = this.traits.shirtColor;

            let shirtPath = this.getShirtPath(shirtType);
            
            if (this.traits.outline === "armOut" || this.traits.outline.startsWith("female")) {
              this.draw.path(shirtPath).fill(shirtColor);
            } else {
              this.addBaseShirt(shirtType, shirtColor);
            }

            this.addShirtLogo();

            if (this.traits.outline !== "mermaid") {
              const pantsPath = this.getPantsPath();
              const pantsColor = this.getPantsColor();
              this.draw.path(pantsPath).fill(pantsColor);
            }
          }
        }

        getShirtPath(shirtType) {
          const shirtPaths = {
            Professional: "M208 368l0-48-8 0-8 0 0 8 0 8-16 0-16 0 0-8 0-8-8 0-8 0 0-8 0-8 8 0...",
            "Dress Shirt": "M208 385.5l0-17.5-8 0-8 0 0-16 0-16-8 0c-5.7 0-8 0.4-8 1.3 0 0.9-3.8 1.1...",
            Jacket: "M208 376l0-56-8 0-8 0 0 8 0 8-8 0-8 0 0 16 0 16-24 0-24 0 0-24 0-24 8 0...",
            Jersey: "M208 352l0-64 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 40 0 40 0 0-8 0-8 8 0...",
            "Long Sleeve": "M208 368l0-48-8 0-8 0 0 8 0 8-8 0-8 0 0 16 0 16-24 0-24 0 0-24 0-24 8 0...",
            Plaid: "M220 409l0-7-6 0-6 0 0-11 0-11 6 0 6 0 0-5 0-5-6 0-6 0 0-11 0-11 6 0...",
            "Open Shirt": "M208 368l0-48-8 0-8 0 0 8 0 8-16 0-16 0 0-8 0-8-8 0-8 0 0-8 0-8 8 0...",
            "Short Sleeve": "M208 368l0-48-8 0-8 0 0 8 0 8-8 0-8 0 0-8 0-8-16 0-16 0 0-8 0-8 8 0...",
            "Suit Top": "M208 376l0-56-8 0-8 0 0 8 0 8-8 0-8 0 0 16 0 16-24 0-24 0 0-24 0-24 8 0...",
            Vacation: "M208 385.5l0-17.5-8 0-8 0 0-16 0-16-8 0c-5.7 0-8 0.4-8 1.3 0 0.9-3.8 1.1...",
            "Long Sleeve": "M208 368l0-48-8 0-8 0 0 8 0 8-8 0-8 0 0 16 0 16-24 0-24 0 0-24 0-24 8 0...",
            Dress: "M176 440 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -24 0 -24 -8 0 -8 0 0 -32 0 -32 8 0...",
            "Dress Shirt": "M208 385.5 l0 -17.5 -8 0 -8 0 0 -16 0 -16 -8 0 c-5.7 0 -8 0.4 -8 1.3 0 0.9 -3.8 1.1...",
            "Track Suit": "M173 457.5 c0 -7.8 0.3 -9.5 1.5 -9.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5...",
            "T-Shirt": "M208 392 l0 -24 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 8 0 8 -24 0 -24 0 0 -8 0 -8 8 0..."
          };
          return shirtPaths[shirtType] || "";
        }

        addBaseShirt(shirtType, shirtColor) {
          const shirtPath = this.getShirtPath(shirtType);
          
          if (typeof shirtColor === 'string') {
            this.draw.path(shirtPath).fill(shirtColor);
          } else {
            // For shirts with multiple colors
            if (shirtType === "Professional" || shirtType === "Dress Shirt") {
              this.draw.path(shirtPath).fill(shirtColor.color1);
              // Add secondary color and buttons if applicable
              if (shirtColor.color2) {
                // Add path for secondary color
                const secondaryPath = "..."; // Define the path for the secondary color
                this.draw.path(secondaryPath).fill(shirtColor.color2);
              }
              if (shirtColor.hasButtons) {
                this.addShirtButtons();
              }
            } else if (shirtType === "Suit Top") {
              this.draw.path(shirtPath).fill(shirtColor.jacket);
              // Add tie
              const tiePath = "..."; // Define the path for the tie
              this.draw.path(tiePath).fill(shirtColor.tie);
            } else if (shirtType === "Vacation") {
              this.draw.path(shirtPath).fill(shirtColor.baseColor);
              // Add undershirt and accent colors
              const undershirtPath = "..."; // Define the path for the undershirt
              this.draw.path(undershirtPath).fill(shirtColor.undershirt);
              const accentPath = "..."; // Define the path for the accent
              this.draw.path(accentPath).fill(shirtColor.accent);
            }
          }
        }

        addShirtButtons() {
          const buttonPath = `
            <g fill="#ffffff">
              <path d="M262 411 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z"/>
              <path d="M262 399 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z"/>
              <path d="M262 387 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z"/>
              <path d="M262 375 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z"/>
              <path d="M262 363 c0 -1.3 0.7 -2 2 -2 1.3 0 2 0.7 2 2 0 1.3 -0.7 2 -2 2 -1.3 0 -2 -0.7 -2 -2z"/>
            </g>`;
          this.draw.svg(buttonPath);
        }

        getPantsPath() {
          return "M160 456 l0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 -40 0 -40 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -40 0 -40 0 0 -8z";
        }

        getPantsColor() {
          return this.traits.pantsColor;
        }

        addShoes() {
          const shoeStyle = this.traits.shoeType;
          const outline = this.traits.outline;

          if (!shoeStyle || shoeStyle === 'No Shoes') return;

          let shoeColor;
          let shoePath;

          if (outline.startsWith('female')) {
            if (shoeStyle === 'Converse') {
              shoeColor = '#222222';
              shoePath = `
                <g fill="${shoeColor}">
                  <path d="M141 488 c0 -6.4 0.3 -8 1.5 -8 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -6.5 0 -6.5 25.5 0 25.5 0 0 9.5 0 9.5 -6.5 0 -6.5 0 0 6.5 0 6.5 -27 0 -27 0 0 -8z"/>
                  <path d="M301 489.5 l0 -6.5 -6.5 0 -6.5 0 0 -9.5 0 -9.5 25.5 0 25.5 0 0 6.5 0 6.5 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.6 1.5 8 l0 8 -27 0 -27 0 0 -6.5z"/>
                </g>
                <g fill="#ffffff">
                  <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 -8z"/>
                  <path d="M192 488 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
                  <path d="M288 488 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
                  <path d="M352 488 l0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 -16 0 -16 0 0 -8z"/>
                </g>`;
            } else if (shoeStyle === 'Flats') {
              shoePath = `
                <g fill="#222222">
                  <path d="M112 488 l0 -8 48 0 48 0 0 8 0 8 -48 0 -48 0 0 -8z"/>
                  <path d="M288 488 l0 -8 48 0 48 0 0 8 0 8 -48 0 -48 0 0 -8z"/>
                </g>`;
            } else if (shoeStyle === 'Heels') {
              shoeColor = '#b7d7e3'; // Use same color as dress if applicable
              shoePath = `
                <g fill="#000000">
                  <path d="M96 496 l0 -16 8 0 8 0 0 -8 0 -8 17.5 0 17.5 0 0 9.5 0 9.5 -16 0 -16 0 0 5 0 5 29 0 29 0 0 -8 0 -8 11 0 11 0 0 8 0 8 5 0 5 0 0 -14.5 0 -14.5 9.5 0 9.5 0 0 24 0 24 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -40 0 -40 0 0 -16z"/>
                  <path d="M272 488 l0 -24 9.5 0 9.5 0 0 14.5 0 14.5 5 0 5 0 0 -8 0 -8 11 0 11 0 0 8 0 8 29 0 29 0 0 -5 0 -5 -16 0 -16 0 0 -9.5 0 -9.5 17.5 0 17.5 0 0 8 0 8 8 0 8 0 0 16 0 16 -40 0 -40 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 -24z"/>
                </g>
                <g fill="${shoeColor}">
                  <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 32 0 32 0 0 16 0 16 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -32 0 -32 0 0 -8z"/>
                  <path d="M288 480 l0 -16 32 0 32 0 0 8 0 8 16 0 16 0 0 8 0 8 -32 0 -32 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -16z"/>
                </g>`;
            } else if (shoeStyle === 'Sandals') {
              shoePath = `
                <g fill="#222222">
                  <path d="M112 488 l0 -8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 -48 0 -48 0 0 -8z"/>
                  <path d="M288 488 l0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 8 0 8 24 0 24 0 0 8 0 8 -48 0 -48 0 0 -8z"/>
                </g>`;
            }
          } else {
            // Male Outline Shoe Styles (base/arm out)
            if (shoeStyle.startsWith('All')) {
              // Determine the color for "All X Shoes"
              if (shoeStyle.includes('Black')) shoeColor = '#282727';
              else if (shoeStyle.includes('Grey')) shoeColor = '#a8a6a5';
              else if (shoeStyle.includes('Red')) shoeColor = '#ed3030';

              shoePath = `
                <g fill="${shoeColor}">
                  <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 40 0 40 0 0 16 0 16 -56 0 -56 0 0 -8z"/>
                  <path d="M304 480 l0 -16 40 0 40 0 0 8 0 8 16 0 16 0 0 8 0 8 -56 0 -56 0 0 -16z"/>
                </g>`;
            } else if (shoeStyle === 'Black & White Shoes') {
              shoePath = `
                <g fill="#000000">
                  <path d="M112 488 l0 -8 9.5 0 9.5 0 0 8 0 8 -9.5 0 -9.5 0 0 -8z"/>
                  <path d="M397 488 l0 -8 9.5 0 9.5 0 0 8 0 8 -9.5 0 -9.5 0 0 -8z"/>
                  <path d="M189 473.5 l0 -9.5 17.5 0 17.5 0 0 9.5 0 9.5 -17.5 0 -17.5 0 0 -9.5z"/>
                  <path d="M304 473.5 l0 -9.5 17.5 0 17.5 0 0 9.5 0 9.5 -17.5 0 -17.5 0 0 -9.5z"/>
                </g>
                <g fill="#ffffff">
                  <path d="M128 488 l0 -8 8 0 8 0 0 -8 0 -8 24 0 24 0 0 8 0 8 16 0 16 0 0 8 0 8 -48 0 -48 0 0 -8z"/>
                  <path d="M304 488 l0 -8 16 0 16 0 0 -8 0 -8 24 0 24 0 0 8 0 8 8 0 8 0 0 8 0 8 -48 0 -48 0 0 -8z"/>
                </g>`;
            } else if (shoeStyle === 'Black Top Shoes') {
              shoePath = `
                <g fill="#000000">
                  <path d="M141 481.5 c0 -0.8 0.7 -1.5 1.5 -1.5 1.2 0 1.5 -1.6 1.5 -8 l0 -8 40 0 40 0 0 9.5 0 9.5 -41.5 0 c-36.2 0 -41.5 -0.2 -41.5 -1.5z"/>
                  <path d="M304 473.5 l0 -9.5 40 0 40 0 0 8 c0 6.4 0.3 8 1.5 8 0.8 0 1.5 0.7 1.5 1.5 0 1.3 -5.3 1.5 -41.5 1.5 l-41.5 0 0 -9.5z"/>
                </g>
                <g fill="#ffffff">
                  <path d="M112 488 l0 -8 56 0 56 0 0 8 0 8 -56 0 -56 0 0 -8z"/>
                  <path d="M304 488 l0 -8 56 0 56 0 0 8 0 8 -56 0 -56 0 0 -8z"/>
                </g>`;
            } else if (shoeStyle === 'Converse' || shoeStyle === 'Red Converse') {
              shoeColor = (shoeStyle === 'Red Converse') ? '#aa2a2a' : '#282727';
              shoePath = `
                <g fill="${shoeColor}">
                  <path d="M141 488 c0 -6.4 0.3 -8 1.5 -8 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -6.5 0 -6.5 33.5 0 33.5 0 0 9.5 0 9.5 -6.5 0 -6.5 0 0 6.5 0 6.5 -35 0 -35 0 0 -8z"/>
                  <path d="M317 489.5 l0 -6.5 -6.5 0 -6.5 0 0 -9.5 0 -9.5 33.5 0 33.5 0 0 6.5 0 6.5 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.6 1.5 8 l0 8 -35 0 -35 0 0 -6.5z"/>
                </g>
                <g fill="#ffffff">
                  <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 -8z"/>
                  <path d="M208 488 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
                  <path d="M304 488 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
                  <path d="M384 488 l0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 -16 0 -16 0 0 -8z"/>
                </g>`;
            } else if (shoeStyle === 'House Shoes') {
              shoePath = `
                <g fill="#644727">
                  <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 16 0 16 0 0 8 0 8 24 0 24 0 0 8 0 8 -56 0 -56 0 0 -8z"/>
                  <path d="M304 488 l0 -8 24 0 24 0 0 -8 0 -8 16 0 16 0 0 8 0 8 16 0 16 0 0 8 0 8 -56 0 -56 0 0 -8z"/>
                </g>`;
            } else if (shoeStyle === 'Slides') {
              shoePath = `
                <g fill="#282727">
                  <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 8 0 8 32 0 32 0 0 8 0 8 -56 0 -56 0 0 -8z"/>
                  <path d="M304 488 l0 -8 32 0 32 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 -56 0 -56 0 0 -8z"/>
                </g>`;
            }
          }

          if (shoePath) {
            this.draw.svg(shoePath);
          }
        }

        addAccessories() {
          const accessoryStyle = this.traits.accessoryStyle;
          const outline = this.traits.outline;

          if (!accessoryStyle || accessoryStyle === 'None') return;

          let accessoryPath;
          let fillColor;

          if (outline === 'base') {
            if (accessoryStyle === 'Bracelet Right') {
              fillColor = '#dcdf2d';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M368 378 c0 -1.8 -0.7 -2 -8 -2 l-8 0 0 -4 0 -4 8 0 c7.3 0 8 0.2 8 2 0 1.8 0.7 2 8 2 7.3 0 8 -0.2 8 -2 0 -1.8 0.7 -2 8 -2 l8 0 0 4 0 4 -8 0 c-7.3 0 -8 0.2 -8 2 0 1.8 -0.7 2 -8 2 -7.3 0 -8 -0.2 -8 -2z"/>
                </g>`;
            } else if (accessoryStyle === 'Earring Bottom') {
              fillColor = '#f7e823';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M208 268 l0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 -4z"/>
                </g>`;
            } else if (accessoryStyle === 'Earring Top') {
              fillColor = '#f7e823';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M208 212 l0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 -4z"/>
                </g>`;
            } else if (accessoryStyle === 'Necklace') {
              fillColor = '#b9c11e';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M266 335 l0 -5 -5 0 -5 0 0 -5 0 -5 5 0 5 0 0 5 0 5 14 0 14 0 0 -5 0 -5 5 0 5 0 0 5 0 5 -5 0 -5 0 0 5 0 5 -14 0 -14 0 0 -5z"/>
                </g>`;
            } else if (accessoryStyle === 'Ring Left') {
              fillColor = '#f7e823';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M149 396 l0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 -4z"/>
                </g>`;
            } else if (accessoryStyle === 'Ring Right') {
              fillColor = '#f7e823';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M373 396 l0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 -4z"/>
                </g>`;
            } else if (accessoryStyle === 'Watch Left') {
              fillColor = '#835e2b';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M144 377.5 c0 -1.2 -1.6 -1.5 -8 -1.5 l-8 0 0 -4 0 -4 8 0 c6.4 0 8 -0.3 8 -1.5 0 -2.1 2.8 -1.9 3.3 0.3 0.4 1.3 0.5 1.1 0.6 -0.5 0.1 -2 0.7 -2.3 4.1 -2.3 l4 0 0 6 0 6 -4.5 0 c-3.3 0 -4.5 0.4 -4.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5z"/>
                  <path d="M157 372 c0 -5.6 0.3 -7 1.5 -7 0.8 0 1.5 0.7 1.5 1.5 0 1.2 1.6 1.5 8 1.5 l8 0 0 4 0 4 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.2 0 -1.5 -1.4 -1.5 -7z"/>
                </g>`;
            } else if (accessoryStyle === 'Watch Right') {
              fillColor = '#885a30';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M368 377.5 c0 -1.2 -1.6 -1.5 -8 -1.5 l-8 0 0 -4 0 -4 8 0 c6.4 0 8 -0.3 8 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.9 1.5 2 0 1.1 0.5 2 1 2 0.6 0 1 -1.1 1 -2.5 0 -2.2 0.4 -2.5 3.3 -2.5 4.7 0 7.7 1 7.7 2.6 0 1.1 1.9 1.4 8 1.4 l8 0 0 4 0 4 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 -0.4 -1.5 -1 0 -0.5 -2.2 -1 -5 -1 -2.7 0 -5 0.5 -5 1 0 0.6 -0.7 1 -1.5 1 -0.8 0 -1.5 -0.7 -1.5 -1.5z"/>
                </g>`;
            } else if (accessoryStyle === 'Bracelet Left') {
              fillColor = '#dcdf2d';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M144 378 c0 -1.8 -0.7 -2 -8 -2 l-8 0 0 -4 0 -4 8 0 c7.3 0 8 0.2 8 2 0 1.8 0.7 2 8 2 7.3 0 8 -0.2 8 -2 0 -1.8 0.7 -2 8 -2 l8 0 0 4 0 4 -8 0 c-7.3 0 -8 0.2 -8 2 0 1.8 -0.7 2 -8 2 -7.3 0 -8 -0.2 -8 -2z"/>
                </g>`;
            } else if (accessoryStyle === 'Back Bling') {
              accessoryPath = `
                <g fill="#000000">
                  <path d="M368 278.5 l0 -9.5 6.5 0 6.5 0 0 -5 0 -5 -6.5 0 -6.5 0 0 -9.5 0 -9.5 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -9.5z m29 -30.5 l0 -5 -5 0 -5 0 0 5 0 5 5 0 5 0 0 -5z m16 -16 l0 -5 -5 0 -5 0 0 5 0 5 5 0 5 0 0 -5z m16 -16 l0 -5 -5 0 -5 0 0 5 0 5 5 0 5 0 0 -5z"/>
                  <path d="M160 264 l0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 9.5 0 9.5 -6.5 0 -6.5 0 0 5 0 5 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.6 1.5 8 l0 8 -9.5 0 -9.5 0 0 -8z m-3 -32 l0 -5 -5 0 -5 0 0 5 0 5 5 0 5 0 0 -5z m-16 -16 l0 -5 -5 0 -5 0 0 5 0 5 5 0 5 0 0 -5z"/>
                </g>
                <g fill="#c1c1c1">
                  <path d="M176 264 l0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
                  <path d="M368 264 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
                </g>`;
            }
          } else if (outline.startsWith('female')) {
            if (accessoryStyle === 'Diamond Necklace' || accessoryStyle === 'Pearls') {
              fillColor = accessoryStyle === 'Diamond Necklace' ? '#b9f2ff' : '#f7f7f7';
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M240 356 l0 -4 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -4 0 -4 4 0 4 0 0 4 0 4 4 0 4 0 0 4 0 4 8 0 8 0 0 -4 0 -4 4 0 4 0 0 -4 0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 4 0 4 -4 0 -4 0 0 4 0 4 -8 0 -8 0 0 -4z"/>
                </g>`;
            } else if (accessoryStyle === 'Diamond Earrings' || accessoryStyle === 'Gold Earrings' || accessoryStyle === 'Silver Earrings') {
              if (accessoryStyle === 'Diamond Earrings') fillColor = '#b9f2ff';
              else if (accessoryStyle === 'Gold Earrings') fillColor = '#ffd700';
              else if (accessoryStyle === 'Silver Earrings') fillColor = '#c0c0c0';
              
              accessoryPath = `
                <g fill="${fillColor}">
                  <path d="M192 264 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
                </g>`;
            }
          }

          if (accessoryPath) {
            this.draw.svg(accessoryPath);
          }
        }

        addHeadwear() {
          const headwearStyle = this.traits.headwearStyle;
          if (!headwearStyle) return;

          let headwearPath;
          let color1, color2;

          switch (headwearStyle) {
            case 'Gryffindor Hat':
              color1 = '#740001';
              color2 = '#eeba30';
              headwearPath = this.getWizardHatSVG(color1, color2);
              break;

            case 'Slytherin Hat':
              color1 = '#136523';
              color2 = '#888888';
              headwearPath = this.getWizardHatSVG(color1, color2);
              break;

            case 'Ravenclaw Hat':
              color1 = '#221a9a';
              color2 = '#946b2d';
              headwearPath = this.getWizardHatSVG(color1, color2);
              break;

            case 'Hufflepuff Hat':
              color1 = '#ad9709';
              color2 = '#363030';
              headwearPath = this.getWizardHatSVG(color1, color2);
              break;

            case 'Cowboy Hat':
              headwearPath = `
                <g fill="#6a4e32">
                  <path d="M144 200 l0 -8 -8 0 -8 0 0 -8 0 -8 32 0 32 0 0 -24 0 -24 8 0 8 0 0 -8 0 -8 64 0 64 0 0 8 0 8 8 0 8 0 0 40 0 40 -48 0 -48 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -48 0 -48 0 0 -8z"/>
                </g>`;
              break;

            case 'Backwards Single Hat':
            case 'Backwards Diamond Hat':
              color1 = headwearStyle === 'Backwards Diamond Hat' ? '#b9f2ff' : '#000000';
              headwearPath = `
                <g fill="#000000">
                  <path d="M144 216 l0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 64 0 64 0 0 8 0 8 8 0 8 0 0 9.5 0 9.6 -9.2 -0.3 -9.3 -0.3 -0.3 -7.7 -0.3 -7.8 -60.9 0 -61 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -24 0 -24 0 0 5 0 5 16 0 c13.6 0 16 0.2 16 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.2 0 -1.5 1.6 -1.5 8 l0 8 -16 0 -16 0 0 -8z"/>
                </g>
                <g fill="${color1}">
                  <path d="M144 200 l0 -8 24 0 24 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 64 0 63.9 0 0.3 7.8 0.3 7.7 7.8 0.3 7.7 0.3 0 23.9 0 24 -104 0 -104 0 0 -8z"/>
                </g>`;
              break;

            case 'Backwards Multi Hat':
              headwearPath = `
                <g fill="#000000">
                  <path d="M144 216 l0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 64 0 64 0 0 8 0 8 8 0 8 0 0 9.5 0 9.5 -9.5 0 -9.5 0 0 -8 0 -8 -61 0 -61 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -24 0 -24 0 0 5 0 5 16 0 c13.6 0 16 0.2 16 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.2 0 -1.5 1.6 -1.5 8 l0 8 -16 0 -16 0 0 -8z"/>
                </g>
                <g fill="#dd1400">
                  <path d="M144 200 l0 -8 24 0 c20.7 0 24 -0.2 24 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 1.2 0 1.5 1.7 1.5 9.5 l0 9.5 -25.5 0 -25.5 0 0 -8z"/>
                </g>
                <g fill="#3341c7">
                  <path d="M192 184 l0 -24 8 0 8 0 0 -8 0 -8 64 0 64 0 0 8 0 8 8 0 8 0 0 24 0 24 -80 0 -80 0 0 -24z"/>
                </g>`;
              break;

            case 'NodeMonke Hat':
            case 'Diamond NodeMonke Hat':
              color1 = headwearStyle === 'Diamond NodeMonke Hat' ? '#b9f2ff' : '#888888';
              headwearPath = `
                <g fill="#050508">
                  <path d="M176 184 l0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 64 0 64 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 -9.5 0 -9.5 0 0 -6.5 0 -6.5 -24 0 -24 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 -61 0 -61 0 0 8 0 8 -8 0 -8 0 0 22.5 0 22.5 -9.5 0 -9.5 0 0 -24z"/>
                </g>
                <g fill="${color1}">
                  <path d="M192 184 l0 -24 8 0 8 0 0 -8 0 -8 64 0 64 0 0 8 0 8 8 0 8 0 0 16 0 16 24 0 24 0 0 8 0 8 -104 0 -104 0 0 -24z"/>
                </g>`;
              break;

            default:
              break;
          }

          if (headwearPath) {
            this.draw.svg(headwearPath);
          }
        }

        getWizardHatSVG(color1, color2) {
          return `
            <g fill="#000000">
              <path d="M128 200 l0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -24 0 -24 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 16 0 16 24 0 24 0 0 8 0 8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -24 0 -24 0 0 -8 c0 -6.4 -0.3 -8 -1.5 -8 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -1.3 3.3 -1.5 24 -1.5 l24 0 0 -5 0 -5 -32 0 -32 0 0 -24 0 -24 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 8 0 8 -8 0 -8 0 0 5 0 5 16 0 16 0 0 8 0 8 8 0 8 0 0 11 0 11 -8 0 -8 0 0 16 0 16 -32 0 -32 0 0 5 0 5 24 0 c20.7 0 24 0.2 24 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.2 0 -1.5 1.6 -1.5 8 l0 8 -24 0 -24 0 0 -8z"/>
            </g>
            <g fill="${color1}">
              <path d="M128 184 l0 -8 32 0 c27.8 0 32 -0.2 32 -1.5 0 -1.3 9.6 -1.5 80 -1.5 70.4 0 80 0.2 80 1.5 0 1.3 4.2 1.5 32 1.5 l32 0 0 8 0 8 -144 0 -144 0 0 -8z"/>
              <path d="M205 145.5 c0 -0.8 0.7 -1.5 1.5 -1.5 1.2 0 1.5 -1.6 1.5 -8 l0 -8 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 9.5 0 9.5 -73.5 0 c-64.7 0 -73.5 -0.2 -73.5 -1.5z"/>
            </g>
            <g fill="${color2}">
              <path d="M192 160 l0 -16 80 0 80 0 0 16 0 16 -80 0 -80 0 0 -16z"/>
            </g>`;
        }

        addEyewear() {
          const eyewear = this.traits.eyewearStyle;
          if (!eyewear) return;

          let svgData = '';

          switch (eyewear) {
            case "Cyclops Red Black":
              svgData = this.getCyclopsSVG("#e21200", "#000000");
              break;
            case "Cyclops Grey Gold":
              svgData = this.getCyclopsSVG("#888888", "#d7d71f");
              break;
            case "Cyclops Red Grey":
              svgData = this.getCyclopsSVG("#888888", "#e21200");
              break;
            case "3D Glasses":
              svgData = this.get3DSVG();
              break;
            case "Hollow White Eyes":
              svgData = this.getHollowEyesSVG("#ffffff");
              break;
            case "Hollow Black Eyes":
              svgData = this.getHollowEyesSVG("#000000");
              break;
          }

          if (svgData) {
            this.draw.svg(svgData);
          }
        }

        getCyclopsSVG(color1, color2) {
          return `<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="512px" height="512px" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
            <g fill="${color1}">
              <path d="M224 240 l0 -16 8 0 8 0 0 -8 0 -8 56 0 56 0 0 9.5 0 9.5 -54.5 0 -54.5 0 0 5 0 5 54.5 0 54.5 0 0 9.5 0 9.5 -64 0 -64 0 0 -16z"/>
            </g>
            <g fill="${color2}">
              <path d="M240 232 l0 -8 56 0 56 0 0 8 0 8 -56 0 -56 0 0 -8z"/>
            </g>
          </svg>`;
        }

        get3DSVG() {
          return `<?xml version="1.0" encoding="utf-8"?>
          <!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.0//EN" "http://www.w3.org/TR/2001/REC-SVG-20010904/DTD/svg10.dtd">
          <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="512px" height="512px" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
            <g fill="#ffffff">
              <path d="M256 248 l0 -24 -24 0 -24 0 0 -8 0 -8 72 0 72 0 0 9.5 0 9.5 -6.5 0 -6.5 0 0 13 0 13 6.5 0 6.5 0 0 9.5 0 9.5 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -24 0 -24 0 0 -24z m45 -8 l0 -13 -13 0 -13 0 0 13 0 13 13 0 13 0 0 -13z"/>
            </g>
            <g fill="#ff0000">
              <path d="M272 240 l0 -16 16 0 16 0 0 16 0 16 -16 0 -16 0 0 -16z"/>
            </g>
            <g fill="#1501f9">
              <path d="M336 240 l0 -16 8 0 8 0 0 16 0 16 -8 0 -8 0 0 -16z"/>
            </g>
          </svg>`;
        }

        getHollowEyesSVG(color) {
          return `<svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="512px" height="512px" viewBox="0 0 512 512" preserveAspectRatio="xMidYMid meet">
            <g fill="${color}">
              <path d="M256 240 l0 -16 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 -24 0 -24 0 0 -16z"/>
              <path d="M320 248 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 16 0 16 -16 0 -16 0 0 -8z"/>
            </g>
          </svg>`;
        }

        addHeldItem() {
          const heldItem = this.traits.heldItem;
          if (!heldItem) return;

          let itemPath;
          let itemColor;

          switch (heldItem) {
            case 'Bitmap Map':
              itemPath = this.getBitmapMapPath();
              break;
            case 'Gold Sweeper':
            case 'Silver Sweeper':
            case 'Sweeper':
              itemPath = this.getSweeperPath();
              itemColor = this.getSweeperColor(heldItem);
              break;
            case 'BTC Staff':
            case 'Silver Staff':
            case 'Diamond Staff':
            case 'Gold Staff':
              itemPath = this.getStaffPath();
              itemColor = this.getStaffColor(heldItem);
              break;
            case 'Lucielle':
              itemPath = this.getLuciellePath();
              break;
            case 'ShitCoin':
              itemPath = this.getShitCoinPath();
              break;
          }

          if (itemPath) {
    this.draw.svg(itemPath);
  }
}

        getBitmapMapPath() {
  return `
    <g fill="#888888">
      <path d="M33.50 494.75 l0 -17.25 -16.75 0 -16.75 0 0 -8 0 -8 5.25 0 5.25 0 0 -4.50 0 -4.50 -5.25 0 -5.25 0 0 -220.50 0 -220.50 5.75 0 5.75 0 0 -4.50 0 -4.50 -5.75 0 -5.75 0 0 -1.25 0 -1.25 256 0 256 0 0 221.75 0 221.75 -8.75 0 -8.75 0 0 7.50 0 7.50 8.75 0 8.75 0 0 12 0 12 -3.75 0 -3.75 0 0 3 0 3 3.75 0 3.75 0 0 11.75 0 11.75 -239.25 0 -239.25 0 0 -17.25z m425 8.75 l0 -3 -3 0 -3 0 0 3 0 3 3 0 3 0 0 -3z m21 1.50 c0 -1.35 -0.15 -1.50 -1.50 -1.50 -1.35 0 -1.50 0.15 -1.50 1.50 0 1.35 0.15 1.50 1.50 1.50 1.35 0 1.50 -0.15 1.50 -1.50z m-420 -6 l0 -5.50 -5.50 0 -5.50 0 0 5.50 0 5.50 5.50 0 5.50 0 0 -5.50z m430 -18 l0 -13.50 -15 0 -15 0 0 13.50 0 13.50 15 0 15 0 0 -13.50z m-40 8.50 l0 -3 -2.50 0 -2.50 0 0 3 0 3 2.50 0 2.50 0 0 -3z m-400 -10.50 l0 -3.50 -4 0 -4 0 0 3.50 0 3.50 4 0 4 0 0 -3.50z m20 -4 l0 -2.50 -2.50 0 -2.50 0 0 2.50 0 2.50 2.50 0 2.50 0 0 -2.50z m436 -1.50 l0 -3 -3 0 -3 0 0 3 0 3 3 0 3 0 0 -3z m-473 -8 l0 -5 -4.50 0 -4.50 0 0 5 0 5 4.50 0 4.50 0 0 -5z m453 -7.50 l0 -4.50 -4.50 0 -4.50 0 0 4.50 0 4.50 4.50 0 4.50 0 0 -4.50z m-423 -2.50 l0 -5 -5.50 0 -5.50 0 0 5 0 5 5.50 0 5.50 0 0 -5z m401 -13 l0 -7 -7 0 -7 0 0 7 0 7 7 0 7 0 0 -7z m-426 -10.50 l0 -13.50 -12.50 0 -12.50 0 0 13.50 0 13.50 12.50 0 12.50 0 0 -13.50z m449 7 l0 -4.50 -4 0 -4 0 0 4.50 0 4.50 4 0 4 0 0 -4.50z m-460 -340.50 l0 -8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 -8z m18 3 l0 -2 -2 0 -2 0 0 2 0 2 2 0 2 0 0 -2z m11 -11.50 l0 -2.50 -3 0 -3 0 0 2.50 0 2.50 3 0 3 0 0 -2.50z m9 -40 l0 -29.50 -31 0 -31 0 0 29.50 0 29.50 31 0 31 0 0 -29.50z m438 20.50 l0 -7 -7 0 -7 0 0 7 0 7 7 0 7 0 0 -7z m-40 -1.50 l0 -6.50 -6.50 0 -6.50 0 0 6.50 0 6.50 6.50 0 6.50 0 0 -6.50z m14 -1 l0 -4.50 -4.50 0 -4.50 0 0 4.50 0 4.50 4.50 0 4.50 0 0 -4.50z m-44 -3 l0 -5.50 -6 0 -6 0 0 5.50 0 5.50 6 0 6 0 0 -5.50z m-335 -10 l0 -6.50 -5.50 0 -5.50 0 0 6.50 0 6.50 5.50 0 5.50 0 0 -6.50z m367 -14 l0 -13.50 -15 0 -15 0 0 13.50 0 13.50 15 0 15 0 0 -13.50z m34 1.50 l0 -10 -11.50 0 -11.50 0 0 10 0 10 11.50 0 11.50 0 0 -10z m-72 3.50 l0 -2.50 -3 0 -3 0 0 2.50 0 2.50 3 0 3 0 0 -2.50z m-15 -12.50 l0 -4 -4.50 0 -4.50 0 0 4 0 4 4.50 0 4.50 0 0 -4z m13 -6 l0 -2 -2 0 -2 0 0 2 0 2 2 0 2 0 0 -2z m67 -4 l0 -4 -4 0 -4 0 0 4 0 4 4 0 4 0 0 -4z m14 1 l0 -2 -2.50 0 -2.50 0 0 2 0 2 2.50 0 2.50 0 0 -2z m-33 -6 l0 -4 -4.50 0 -4.50 0 0 4 0 4 4.50 0 4.50 0 0 -4z m-71 -7 l0 -9 -10 0 -10 0 0 9 0 9 10 0 10 0 0 -9z m51 6 l0 -2 -2 0 -2 0 0 2 0 2 2 0 2 0 0 -2z m-354 -6 l0 -5 -5 0 -5 0 0 5 0 5 5 0 5 0 0 -5z m332 -2 l0 -6 -5.50 0 -5.50 0 0 6 0 6 5.50 0 5.50 0 0 -6z m-395 0 l0 -5 -5.50 0 -5.50 0 0 5 0 5 5.50 0 5.50 0 0 -5z m464 2 l0 -3 -3.50 0 -3.50 0 0 3 0 3 3.50 0 3.50 0 0 -3z m-438 -0.50 l0 -2.50 -2.50 0 -2.50 0 0 2.50 0 2.50 2.50 0 2.50 0 0 -2.50z m390 -2 l0 -2.50 -2.50 0 -2.50 0 0 2.50 0 2.50 2.50 0 2.50 0 0 -2.50z m33 -2 l0 -2.50 -2.50 0 -2.50 0 0 2.50 0 2.50 2.50 0 2.50 0 0 -2.50z m-42 -1 c0 -1.35 -0.15 -1.50 -1.50 -1.50 -1.35 0 -1.50 0.15 -1.50 1.50 0 1.35 0.15 1.50 1.50 1.50 1.35 0 1.50 -0.15 1.50 -1.50z"/>
    </g>
    <g fill="#ff8528">
      <path d="M0 494 l0 -18 17.50 0 17.50 0 0 18 0 18 -17.50 0 -17.50 0 0 -18z"/>
      <path d="M506 507 l0 -2 2 0 2 0 0 2 0 2 -2 0 -2 0 0 -2z"/>
      <path d="M451 503.50 l0 -4.50 4.50 0 4.50 0 0 4.50 0 4.50 -4.50 0 -4.50 0 0 -4.50z"/>
      <path d="M475 505 l0 -3 3 0 3 0 0 3 0 3 -3 0 -3 0 0 -3z"/>
      <path d="M47 499 l0 -7 7 0 7 0 0 7 0 7 -7 0 -7 0 0 -7z"/>
      <path d="M458 481 l0 -15 16.50 0 16.50 0 0 15 0 15 -16.50 0 -16.50 0 0 -15z"/>
      <path d="M443 489.50 l0 -4.50 4 0 4 0 0 4.50 0 4.50 -4 0 -4 0 0 -4.50z"/>
      <path d="M503 485.50 l0 -4.50 4.50 0 4.50 0 0 4.50 0 4.50 -4.50 0 -4.50 0 0 -4.50z"/>
      <path d="M40 479 l0 -5 5.50 0 5.50 0 0 5 0 5 -5.50 0 -5.50 0 0 -5z"/>
      <path d="M63 475 l0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 -4z"/>
      <path d="M498 473.50 l0 -4.50 4.50 0 4.50 0 0 4.50 0 4.50 -4.50 0 -4.50 0 0 -4.50z"/>
      <path d="M22 465.50 l0 -6.50 6 0 6 0 0 6.50 0 6.50 -6 0 -6 0 0 -6.50z"/>
      <path d="M475 458 l0 -6 6 0 6 0 0 6 0 6 -6 0 -6 0 0 -6z"/>
      <path d="M0 457 l0 -6 6 0 6 0 0 6 0 6 -6 0 -6 0 0 -6z"/>
      <path d="M50 455.50 l0 -6.50 7 0 7 0 0 6.50 0 6.50 -7 0 -7 0 0 -6.50z"/>
      <path d="M493 451 l0 -9 9.50 0 9.50 0 0 9 0 9 -9.50 0 -9.50 0 0 -9z"/>
      <path d="M458 457 l0 -2 2 0 2 0 0 2 0 2 -2 0 -2 0 0 -2z"/>
      <path d="M448 442.50 l0 -8.50 8.50 0 8.50 0 0 8.50 0 8.50 -8.50 0 -8.50 0 0 -8.50z"/>
      <path d="M11 432 l0 -15 14 0 14 0 0 15 0 15 -14 0 -14 0 0 -15z"/>
      <path d="M477 439 l0 -6 5.50 0 5.50 0 0 6 0 6 -5.50 0 -5.50 0 0 -6z"/>
      <path d="M9 98.50 l0 -9.50 9.50 0 9.50 0 0 9.50 0 9.50 -9.50 0 -9.50 0 0 -9.50z"/>
      <path d="M39 101.50 l0 -3.50 3.50 0 3.50 0 0 3.50 0 3.50 -3.50 0 -3.50 0 0 -3.50z"/>
      <path d="M48 90 l0 -4 4.50 0 4.50 0 0 4 0 4 -4.50 0 -4.50 0 0 -4z"/>
      <path d="M1 50 l0 -31 32.50 0 32.50 0 0 31 0 31 -32.50 0 -32.50 0 0 -31z"/>
      <path d="M487 70.50 l0 -8.50 8.50 0 8.50 0 0 8.50 0 8.50 -8.50 0 -8.50 0 0 -8.50z"/>
      <path d="M448 69 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>

        <path d="M466 68 l0 -6 6 0 6 0 0 6 0 6 -6 0 -6 0 0 -6z"/>
      <path d="M483 72.50 c0 -1.15 0.20 -1.50 1 -1.50 0.80 0 1 0.35 1 1.50 0 1.15 -0.20 1.50 -1 1.50 -0.80 0 -1 -0.35 -1 -1.50z"/>
      <path d="M419 65 l0 -7 7.50 0 7.50 0 0 7 0 7 -7.50 0 -7.50 0 0 -7z"/>
      <path d="M85 55 l0 -8 7 0 7 0 0 8 0 8 -7 0 -7 0 0 -8z"/>
      <path d="M481 61 c0 -0.65 0.35 -1 1 -1 0.65 0 1 0.35 1 1 0 0.65 -0.35 1 -1 1 -0.65 0 -1 -0.35 -1 -1z"/>
      <path d="M433 41 l0 -15 16.50 0 16.50 0 0 15 0 15 -16.50 0 -16.50 0 0 -15z"/>
      <path d="M474 42.50 l0 -11.50 13 0 13 0 0 11.50 0 11.50 -13 0 -13 0 0 -11.50z"/>
      <path d="M419 46 l0 -4 4.50 0 4.50 0 0 4 0 4 -4.50 0 -4.50 0 0 -4z"/>
      <path d="M401 33.50 l0 -5.50 6 0 6 0 0 5.50 0 5.50 -6 0 -6 0 0 -5.50z"/>
      <path d="M419 27.50 l0 -3.50 3.50 0 3.50 0 0 3.50 0 3.50 -3.50 0 -3.50 0 0 -3.50z"/>
      <path d="M482 23.50 l0 -5.50 5.50 0 5.50 0 0 5.50 0 5.50 -5.50 0 -5.50 0 0 -5.50z"/>
      <path d="M499 24.50 l0 -3.50 4 0 4 0 0 3.50 0 3.50 -4 0 -4 0 0 -3.50z"/>
      <path d="M462 18.50 l0 -5.50 6 0 6 0 0 5.50 0 5.50 -6 0 -6 0 0 -5.50z"/>
      <path d="M380 11.50 l0 -10.50 11.50 0 11.50 0 0 10.50 0 10.50 -11.50 0 -11.50 0 0 -10.50z"/>
      <path d="M447 17.50 l0 -3.50 3.50 0 3.50 0 0 3.50 0 3.50 -3.50 0 -3.50 0 0 -3.50z"/>
      <path d="M87 11.50 l0 -6.50 6.50 0 6.50 0 0 6.50 0 6.50 -6.50 0 -6.50 0 0 -6.50z"/>
      <path d="M418 9.50 l0 -7.50 7 0 7 0 0 7.50 0 7.50 -7 0 -7 0 0 -7.50z"/>
      <path d="M23 9.50 l0 -6.50 7 0 7 0 0 6.50 0 6.50 -7 0 -7 0 0 -6.50z"/>
      <path d="M441 14.50 c0 -1.35 0.15 -1.50 1.50 -1.50 1.35 0 1.50 0.15 1.50 1.50 0 1.35 -0.15 1.50 -1.50 1.50 -1.35 0 -1.50 -0.15 -1.50 -1.50z"/>
      <path d="M491 11.50 l0 -4.50 5 0 5 0 0 4.50 0 4.50 -5 0 -5 0 0 -4.50z"/>
      <path d="M55 11 l0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 -4z"/>
      <path d="M437 13.50 c0 -1.35 0.15 -1.50 1.50 -1.50 1.35 0 1.50 0.15 1.50 1.50 0 1.35 -0.15 1.50 -1.50 1.50 -1.35 0 -1.50 -0.15 -1.50 -1.50z"/>
      <path d="M455 13 c0 -0.65 0.35 -1 1 -1 0.65 0 1 0.35 1 1 0 0.65 -0.35 1 -1 1 -0.65 0 -1 -0.35 -1 -1z"/>
      <path d="M0 7 l0 -6 6.50 0 6.50 0 0 6 0 6 -6.50 0 -6.50 0 0 -6z"/>
      <path d="M445 9 l0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 -4z"/>
      <path d="M478 7 l0 -4 4 0 4 0 0 4 0 4 -4 0 -4 0 0 -4z"/>
      <path d="M438 6 l0 -3 3 0 3 0 0 3 0 3 -3 0 -3 0 0 -3z"/>
      <path d="M49 4.50 c0 -1.35 0.15 -1.50 1.50 -1.50 1.35 0 1.50 0.15 1.50 1.50 0 1.35 -0.15 1.50 -1.50 1.50 -1.35 0 -1.50 -0.15 -1.50 -1.50z"/>
      <path d="M435 5 c0 -0.65 0.35 -1 1 -1 0.65 0 1 0.35 1 1 0 0.65 -0.35 1 -1 1 -0.65 0 -1 -0.35 -1 -1z"/>
      <path d="M454 4 c0 -0.65 0.35 -1 1 -1 0.65 0 1 0.35 1 1 0 0.65 -0.35 1 -1 1 -0.65 0 -1 -0.35 -1 -1z"/>
      <path d="M445 2 c0 -0.65 0.35 -1 1 -1 0.65 0 1 0.35 1 1 0 0.65 -0.35 1 -1 1 -0.65 0 -1 -0.35 -1 -1z"/>
    </g>
  `;
}

getSweeperPath() {
  return `
    <g fill="#000000">
      <path d="M432 498.5 l0 -5.5 10.5 0 10.5 0 0 -37 0 -37 -12 0 -12 0 0 -25.5 0 -25.5 5.5 0 5.5 0 0 20 0 20 8 0 8 0 0 4 0 4 4 0 4 0 0 40 0 40 -4 0 -4 0 0 4 0 4 -12 0 -12 0 0 -5.5z"/>
      <path d="M384 440 l0 -24 4 0 4 0 0 -4 0 -4 8 0 8 0 0 -20 0 -20 5.5 0 5.5 0 0 25.5 0 25.5 -12 0 -12 0 0 22.5 0 22.5 -5.5 0 -5.5 0 0 -24z"/>
      <path d="M408 264 l0 -24 3.5 0 c3.4 0 3.5 -0.1 3.5 -4 l0 -4 8 0 8 0 0 4 0 4 4.5 0 4.5 0 0 24 0 24 -5.5 0 -5.5 0 0 -22.5 0 -22.5 -5 0 -5 0 0 22.5 0 22.5 -5.5 0 -5.5 0 0 -24z"/>
    </g>
    <g fill="#ccb13b">
      <path d="M432 488 l0 -8 -8 0 -8 0 0 -8 0 -8 -12 0 -12 0 0 -24 0 -24 12 0 c10 0 12 -0.2 12 -1.5 0 -1.2 1.6 -1.5 8 -1.5 6.4 0 8 0.3 8 1.5 0 1.3 2 1.5 12 1.5 l12 0 0 40 0 40 -12 0 -12 0 0 -8z"/>
    </g>
    <g fill="#fdd204">
      <path d="M432 498.5 l0 -5.5 10.5 0 10.5 0 0 -37 0 -37 -12 0 -12 0 0 -25.5 0 -25.5 5.5 0 5.5 0 0 20 0 20 8 0 8 0 0 4 0 4 4 0 4 0 0 40 0 40 -4 0 -4 0 0 4 0 4 -12 0 -12 0 0 -5.5z"/>
      <path d="M384 440 l0 -24 4 0 4 0 0 -4 0 -4 8 0 8 0 0 -20 0 -20 5.5 0 5.5 0 0 25.5 0 25.5 -12 0 -12 0 0 22.5 0 22.5 -5.5 0 -5.5 0 0 -24z"/>
      <path d="M408 264 l0 -24 3.5 0 c3.4 0 3.5 -0.1 3.5 -4 l0 -4 8 0 8 0 0 4 0 4 4.5 0 4.5 0 0 24 0 24 -5.5 0 -5.5 0 0 -22.5 0 -22.5 -5 0 -5 0 0 22.5 0 22.5 -5.5 0 -5.5 0 0 -24z"/>
    </g>
    <g fill="#ccb13b">
      <path d="M432 488 l0 -8 -8 0 -8 0 0 -8 0 -8 -12 0 -12 0 0 -24 0 -24 12 0 c10 0 12 -0.2 12 -1.5 0 -1.2 1.6 -1.5 8 -1.5 6.4 0 8 0.3 8 1.5 0 1.3 2 1.5 12 1.5 l12 0 0 40 0 40 -12 0 -12 0 0 -8z"/>
    </g>
    <g fill="#fdd204">
      <path d="M432.2 488.3 c-0.1 -4.6 -0.6 -8.3 -1.2 -8.3 -0.6 0 -1.1 -9.1 -1.3 -23.7 l-0.2 -23.8 -0.3 23.8 c-0.2 20.2 -0.4 23.7 -1.7 23.7 -1.2 0 -1.5 -3.6 -1.8 -23.7 l-0.2 -23.8 -0.3 23.8 c-0.2 20.2 -0.4 23.7 -1.7 23.7 -1.2 0 -1.5 -3.6 -1.8 -23.7 l-0.2 -23.8 -0.3 23.8 c-0.2 20.3 -0.4 23.7 -1.7 23.7 -1.3 0 -1.5 -3.4 -1.7 -23.7 l-0.2 -23.8 -0.6 24 c-0.3 13.2 -0.7 20.3 -0.8 15.8 -0.1 -4.6 -0.6 -8.3 -1.2 -8.3 -0.6 0 -1.1 -6.4 -1.3 -15.7 l-0.3 -15.8 -0.2 15.8 c-0.2 13.1 -0.4 15.7 -1.7 15.7 -1.2 0 -1.5 -2.7 -1.8 -15.7 l-0.3 -15.8 -0.2 15.8 c-0.2 13.1 -0.4 15.7 -1.7 15.7 -1.2 0 -1.5 -2.7 -1.8 -15.7 l-0.3 -15.8 -0.2 15.8 c-0.2 13.1 -0.4 15.7 -1.7 15.7 -1.2 0 -1.5 -2.7 -1.8 -15.7 l-0.3 -15.8 -0.2 15.8 c-0.2 13.1 -0.4 15.7 -1.7 15.7 -1.2 0 -1.5 -2.7 -1.8 -15.7 l-0.3 -15.8 -0.2 15.8 c-0.2 13.2 -0.4 15.7 -1.7 15.7 -1.3 0 -1.5 -2.5 -1.7 -15.7 l-0.2 -15.8 -0.6 16 c-0.5 15 -0.6 14.5 -0.7 -8.5 0 -13.5 0.3 -22.9 0.7 -21 l0.7 3.5 0.2 -3.2 c0.1 -2.1 0.6 -3.3 1.5 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.1 -2.1 0.7 -3.3 1.6 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.1 -2.1 0.7 -3.3 1.6 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.1 -2.1 0.7 -3.3 1.6 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.1 -2.1 0.7 -3.3 1.6 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.1 -1.8 0.7 -3.3 1.2 -3.3 0.6 0 1 -8.7 1 -24 l0 -24 8 0 8 0 0.1 23.3 c0 12.7 0.4 25 0.8 27.2 0.8 3.9 0.9 3.9 1 0.8 0.1 -2.2 0.6 -3.3 1.5 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.1 -2.1 0.7 -3.3 1.6 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.3 -4.4 2.9 -4.4 3.5 0 l0.4 3.2 0.1 -3.2 c0.1 -2.1 0.7 -3.3 1.6 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.1 -2.1 0.7 -3.3 1.6 -3.3 0.9 0 1.6 1.3 1.9 3.3 l0.4 3.2 0.1 -3.2 c0.1 -1.8 0.7 -3.3 1.2 -3.3 0.7 0 1 14 1 40 0 25.6 -0.4 40 -1 40 -0.6 0 -1.1 -11.7 -1.3 -31.7 l-0.2 -31.8 -0.3 31.8 c-0.2 27.3 -0.4 31.7 -1.7 31.7 -1.3 0 -1.5 -4.5 -1.8 -31.7 l-0.2 -31.8 -0.3 31.8 c-0.2 27.3 -0.4 31.7 -1.7 31.7 -1.3 0 -1.5 -4.5 -1.8 -31.7 l-0.2 -31.8 -0.3 31.8 c-0.2 27.3 -0.4 31.7 -1.7 31.7 -1.3 0 -1.5 -4.5 -1.8 -31.7 l-0.2 -31.8 -0.3 31.8 c-0.2 27.3 -0.4 31.7 -1.7 31.7 -1.3 0 -1.5 -4.5 -1.8 -31.7 l-0.2 -31.8 -0.3 31.8 c-0.2 27.4 -0.4 31.7 -1.7 31.7 -1.3 0 -1.5 -4.3 -1.7 -31.7 l-0.3 -31.8 -0.5 32 c-0.3 17.6 -0.6 28.3 -0.8 23.8z m-14.5 -71 c-0.3 -1 -0.5 -0.2 -0.5 1.7 0 1.9 0.2 2.7 0.5 1.8 0.2 -1 0.2 -2.6 0 -3.5z m4 0 c-0.3 -1 -0.5 -0.2 -0.5 1.7 0 1.9 0.2 2.7 0.5 1.8 0.2 -1 0.2 -2.6 0 -3.5z m4 0 c-0.3 -1 -0.5 -0.2 -0.5 1.7 0 1.9 0.2 2.7 0.5 1.8 0.2 -1 0.2 -2.6 0 -3.5z m4 0 c-0.3 -1 -0.5 -0.2 -0.5 1.7 0 1.9 0.2 2.7 0.5 1.8 0.2 -1 0.2 -2.6 0 -3.5z"/>
      <path d="M416 264 l0 -24 8 0 8 0 0 24 0 24 -8 0 -8 0 0 -24z"/>
    </g>
  `;
}


        getSweeperColor(type) {
          switch (type) {
            case 'Sweeper': return '#8a510a';
            case 'Silver Sweeper': return '#c0c0c0';
            case 'Gold Sweeper': return '#ffd700';
            default: return '#000000';
          }
        }

        
getStaffPath() {
  return `
    <g fill="#000000">
      <path d="M429 424 l0 -56 5.5 0 5.5 0 0 56 0 56 -5.5 0 -5.5 0 0 -56z"/>
      <path d="M416 465.5 c0 -1.1 -1.1 -1.5 -4 -1.5 l-4 0 0 -48 0 -48 5.5 0 5.5 0 0 49.5 c0 43.3 -0.2 49.5 -1.5 49.5 -0.8 0 -1.5 -0.7 -1.5 -1.5z"/>
      <path d="M408 252 l0 -36 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -5.5 0 -5.5 9.5 0 9.5 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 41.5 0 41.5 -5.5 0 -5.5 0 0 -36z"/>
      <path d="M429 424 l0 -56 5.5 0 5.5 0 0 56 0 56 -5.5 0 -5.5 0 0 -56z"/>
      <path d="M416 465.5 c0 -1.1 -1.1 -1.5 -4 -1.5 l-4 0 0 -48 0 -48 5.5 0 5.5 0 0 49.5 c0 43.3 -0.2 49.5 -1.5 49.5 -0.8 0 -1.5 -0.7 -1.5 -1.5z"/>
      <path d="M408 252 l0 -36 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -4 0 -4 -4 0 -4 0 0 -5.5 0 -5.5 9.5 0 9.5 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 41.5 0 41.5 -5.5 0 -5.5 0 0 -36z"/>
      <path d="M429 246.5 l0 -41.5 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -21 0 -21 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -21 0 -21 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 c0 13.6 -0.2 16 -1.5 16 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -1.1 -1.1 -1.5 -4 -1.5 l-4 0 0 -16 0 -16 4 0 4 0 0 -4 0 -4 4 0 4 0 0 -4 0 -4 4 0 4 0 0 -4 0 -4 4 0 4 0 0 -4 0 -4 4 0 4 0 0 -4 0 -4 24 0 24 0 0 4 0 4 4 0 4 0 0 4 0 4 4 0 4 0 0 4 0 4 4 0 4 0 0 4 0 4 4 0 4 0 0 4 0 4 4 0 4 0 0 24 0 24 -4 0 -4 0 0 4 0 4 -4 0 -4 0 0 4 0 4 -4 0 -4 0 0 4 0 4 -4 0 -4 0 0 4 0 4 -4 0 -4 0 0 36 0 36 -5.5 0 -5.5 0 0 -41.5z"/>
    </g>
    <g fill="#f98b02">
      <path d="M416 209.5 c0 -1.2 -1.6 -1.5 -8 -1.5 l-8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -24 0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 24 0 24 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 24 0 24 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 1.2 -1.6 1.5 -8 1.5 -6.4 0 -8 -0.3 -8 -1.5z m6 -28.5 l0 -4 6 0 6 0 0 4 c0 2.2 0.5 4 1 4 0.6 0 1 -1.8 1 -4 0 -3.6 0.3 -4 2.5 -4 1.4 0 2.5 -0.4 2.5 -1 0 -0.6 -6 -1 -16 -1 l-16 0 0 -11 0 -11 16 0 c10 0 16 -0.4 16 -1 0 -0.6 -6 -1 -16 -1 l-16 0 0 -11 0 -11 16 0 c10 0 16 -0.4 16 -1 0 -0.5 -1.1 -1 -2.5 -1 -2.2 0 -2.5 -0.4 -2.5 -4 0 -2.2 -0.4 -4 -1 -4 -0.5 0 -1 1.8 -1 4 l0 4 -6 0 -6 0 0 -4 c0 -2.2 -0.4 -4 -1 -4 -0.5 0 -1 1.8 -1 4 l0 4 -6.5 0 -6.5 0 0 25 0 25 6.5 0 6.5 0 0 4 c0 2.2 0.5 4 1 4 0.6 0 1 -1.8 1 -4z m27 -17 c0 -2.7 -0.4 -5 -1 -5 -0.5 0 -1 2.3 -1 5 0 2.8 0.5 5 1 5 0.6 0 1 -2.2 1 -5z m0 -24 c0 -2.7 -0.4 -5 -1 -5 -0.5 0 -1 2.3 -1 5 0 2.8 0.5 5 1 5 0.6 0 1 -2.2 1 -5z"/>
    </g>
    <g fill="#b9f2ff">
      <path d="M416 424 l0 -56 8 0 8 0 0 56 0 56 -8 0 -8 0 0 -56z"/>
      <path d="M416 248 l0 -40 8 0 8 0 0 40 0 40 -8 0 -8 0 0 -40z"/>
      <path d="M417 184 l0 -4 -6.5 0 -6.5 0 0 -28 0 -28 6.5 0 6.5 0 0 -4 0 -4 4 0 4 0 0 4 c0 3.8 0.2 4 3 4 2.8 0 3 -0.2 3 -4 l0 -4 4 0 4 0 0 4 c0 3.6 0.3 4 2.5 4 2.3 0 2.5 0.4 2.5 4 l0 4 4 0 4 0 0 8 0 8 -4 0 -4 0 0 4 0 4 4 0 4 0 0 8 0 8 -4 0 -4 0 0 4 c0 3.6 -0.2 4 -2.5 4 -2.2 0 -2.5 0.4 -2.5 4 l0 4 -4 0 -4 0 0 -4 c0 -3.8 -0.2 -4 -3 -4 -2.8 0 -3 0.2 -3 4 l0 4 -4 0 -4 0 0 -4z m27 -20 l0 -8 -16 0 -16 0 0 8 0 8 16 0 16 0 0 -8z m0 -24 l0 -8 -16 0 -16 0 0 8 0 8 16 0 16 0 0 -8z"/>
    </g>
  `;
}

getStaffColor(type) {
  switch (type) {
    case 'Diamond Staff':
      return '#b9f2ff';
    case 'Gold Staff':
      return '#ffd700';
    case 'Silver Staff':
      return '#c0c0c0';
    case 'BTC Staff':
      return '#8a510a';
    default:
      return '#000000';
  }
}

        getLuciellePath() {
  return `
    <g fill="#888888">
      <path d="M407.4 391.7 c-0.3 -0.8 -0.4 -4.7 -0.2 -8.8 l0.3 -7.4 3.8 -0.3 c3.5 -0.3 3.7 -0.5 3.7 -3.8 0 -2.7 0.4 -3.4 2 -3.4 1.8 0 2 0.7 2 5.5 l0 5.5 -4 0 -4 0 0 5 0 5 13 0 13 0 0 -5 0 -5 -4 0 -4 0 0 -5.5 c0 -4.8 0.2 -5.5 2 -5.5 1.6 0 2 0.7 2 3.4 0 3.3 0.2 3.5 3.8 3.8 l3.7 0.3 0 8.5 0 8.5 -16.3 0.3 c-13 0.2 -16.3 0 -16.8 -1.1z"/>
      <path d="M411 280.6 c0 -6.5 -0.2 -7.4 -2 -7.9 -2 -0.5 -2 -1.4 -2 -75 0 -70.2 0.1 -74.5 1.8 -76 6.9 -6.2 23.5 -6.2 30.4 0 1.7 1.5 1.8 5.8 1.8 76 0 73.6 0 74.5 -2 75 -1.8 0.5 -2 1.4 -2 7.9 0 6.7 -0.2 7.4 -2 7.4 -1.9 0 -2 -0.7 -2 -9.5 0 -8.8 0.1 -9.5 2 -9.5 1.9 0 2 -0.7 2 -23.5 l0 -23.5 -13 0 -13 0 0 23.5 c0 22.8 0.1 23.5 2 23.5 1.9 0 2 0.7 2 9.5 0 8.8 -0.1 9.5 -2 9.5 -1.8 0 -2 -0.7 -2 -7.4z m15.7 -76.2 l-4.7 -2.4 -4.8 2.4 -4.7 2.5 9.5 0 9.5 0 -4.8 -2.5z m0.1 -16.1 c-1.6 -0.2 -4 -0.2 -5.5 0 -1.6 0.2 -0.3 0.4 2.7 0.4 3 0 4.3 -0.2 2.8 -0.4z m10.2 -10.8 c0 -2.1 -18.3 -2.1 -22 0 -2.3 1.3 -1.4 1.4 9.8 1.5 10.2 0 12.2 -0.2 12.2 -1.5z m-9 -17.5 c1 -0.7 -1.4 -1 -7.7 -1 -5.6 0 -9.3 0.4 -9.3 1 0 1.3 15 1.3 17 0z m1.5 -38 c-1.1 -0.5 -3.6 -0.9 -5.5 -0.9 -1.9 0 -4.4 0.4 -5.5 0.9 -1.4 0.6 0.4 0.9 5.5 0.9 5.1 0 6.9 -0.3 5.5 -0.9z"/>
    </g>
    <g fill="#a67537">
      <path d="M408 384 l0 -8 4 0 4 0 0 -4 0 -4 8 0 8 0 0 4 0 4 4 0 4 0 0 8 0 8 -16 0 -16 0 0 -8z"/>
      <path d="M416 296 c0 -7.3 -0.2 -8 -2 -8 -1.8 0 -2 -0.7 -2 -8 0 -7.3 -0.2 -8 -2 -8 -1.9 0 -2 -0.7 -2 -26.5 0 -20.5 0.3 -26.5 1.3 -26.6 0.6 -0.1 5.7 -0.2 11.1 -0.3 5.9 -0.1 10.1 -0.5 10.3 -1.1 0.2 -0.7 -3.7 -1 -11.2 -1 -10.2 0.1 -11.5 -0.1 -11.5 -1.6 0 -1 0.6 -2 1.3 -2.3 0.9 -0.5 0.9 -0.7 0 -1.2 -0.7 -0.3 -1.3 -2 -1.3 -3.8 0 -3 0.5 -3.4 7 -6.6 l7 -3.4 9 4.4 c7.4 3.6 9 4.8 9 6.7 0 1.3 -0.5 2.2 -1.1 2 -0.6 -0.1 -1.4 0.4 -1.6 1.1 -0.3 0.8 0.1 1 1.1 0.6 1.2 -0.4 1.6 0 1.6 1.5 0 1.2 -0.6 2.2 -1.2 2.2 -0.7 0.1 -2 0.3 -2.8 0.4 -0.8 0.1 -2.1 0.3 -2.7 0.4 -0.7 0 -1.3 0.5 -1.3 1 0 0.5 1.8 0.8 4 0.6 l4 -0.4 0 27 c0 26.2 0 26.9 -2 26.9 -1.8 0 -2 0.7 -2 8 0 7.3 -0.2 8 -2 8 -1.8 0 -2 0.7 -2 8 l0 8 -8 0 -8 0 0 -8z m0.3 -84.5 c-1 -0.7 -2.1 -1.1 -2.5 -0.9 -1.6 1 -0.7 1.9 1.8 2 2.3 0.2 2.4 0.1 0.7 -1.1z m19 0.6 c0.4 -0.1 0.7 -0.5 0.7 -0.9 0 -0.4 -3.1 -0.8 -7 -0.8 -3.8 0 -7 0.4 -7 0.9 0 0.4 -0.4 0.5 -1 0.2 -0.5 -0.3 -1 -0.2 -1 0.2 0 0.7 10.9 1 15.3 0.4z"/>
      <path d="M431.2 200.1 c-7.3 -3.7 -7.3 -3.7 -4.7 -4.9 1.5 -0.7 3.1 -0.9 3.7 -0.6 0.6 0.4 0.9 0.1 0.6 -0.7 -0.6 -1.8 -6.5 -2 -7.9 -0.3 -0.6 0.8 -1.6 1.4 -2.1 1.4 -0.6 0 -0.4 -0.8 0.3 -1.7 1.2 -1.5 1.2 -1.6 -0.4 -1 -2.1 0.8 -12.7 -4.2 -12.7 -6 0 -1.6 -0.6 -1.5 17.3 -1.7 15.8 -0.2 18 0.6 10.7 3.9 -3.9 1.8 -5.6 5.3 -2.7 5.6 0.6 0.1 1.9 0.3 2.7 0.4 0.8 0.1 2.1 0.3 2.8 0.4 1.3 0.1 1.8 9.1 0.5 9.1 -0.5 -0.1 -4.1 -1.8 -8.1 -3.9z"/>
      <path d="M408 198.1 l0 -4 4 0.4 c2.2 0.2 5 0.7 6.2 1.1 1.9 0.6 1.6 1 -3.2 3.5 -3 1.5 -5.8 2.8 -6.2 2.9 -0.5 0 -0.8 -1.8 -0.8 -3.9z"/>
      <path d="M434 192.7 c0 -0.8 1.1 -1.9 2.5 -2.5 3.4 -1.6 3.5 -1.5 3.5 0.9 0 1.6 -0.4 1.9 -2 1.4 -1.1 -0.4 -2 -0.2 -2 0.4 0 0.6 -0.4 1.1 -1 1.1 -0.5 0 -1 -0.6 -1 -1.3z"/>
      <path d="M409 192 c-0.8 -0.5 -1.2 -1.2 -0.9 -1.5 0.8 -0.8 3.9 0.5 3.9 1.6 0 1.1 -1.1 1.1 -3 -0.1z"/>
      <path d="M408 179.4 c0 -2.7 0.6 -3.4 4.1 -4.9 2.3 -1.1 6.3 -1.9 9 -1.9 3.9 0 4.6 -0.3 3.7 -1.3 -0.6 -0.8 -2 -1.1 -3.2 -0.8 -2.1 0.6 -2.1 0.6 -0.1 -0.6 1.1 -0.7 2.3 -1.6 2.6 -2.2 0.7 -0.9 12.5 -1.7 14.7 -1 0.6 0.3 1.2 1.1 1.2 1.9 0 1.5 -0.4 1.6 -6.4 1.8 -2.2 0.1 -4.1 0.6 -4.3 1.2 -0.2 0.7 1.6 1 5.2 0.9 l5.5 -0.2 0 4.8 c0 2.7 -0.3 5 -0.7 5 -0.5 0.1 -7.7 0.2 -16 0.3 l-15.3 0.2 0 -3.2z"/>
      <path d="M408 168.6 c0 -2 0.4 -2.2 7 -2.2 3.9 0 7 0.3 7 0.7 0 1.1 -5.4 3 -9.8 3.4 -3.8 0.3 -4.2 0.1 -4.2 -1.9z"/>
      <path d="M409.2 164.2 c-1.9 -0.6 -1.5 -7.9 0.4 -8.6 0.9 -0.3 2 -0.3 2.6 0 0.6 0.4 0.8 0.1 0.6 -0.7 -0.3 -0.8 -1.5 -1.3 -2.7 -1.2 -1.8 0.2 -2.1 -0.2 -2.1 -3.2 0 -1.9 0.3 -3.6 0.8 -3.6 0.4 -0.1 6.4 -0.2 13.5 -0.3 11.2 -0.1 12.8 0.1 13.3 1.6 0.3 0.9 1.4 2 2.5 2.3 2.2 0.7 2.5 2.1 0.7 2.9 -1 0.5 -1 0.7 0 1.2 2.8 1.3 1.1 4.1 -4.5 6.9 -5 2.4 -7 2.9 -14.9 3 -5 0.1 -9.6 -0.1 -10.2 -0.3z m24.8 -9.4 c0 -1 0.1 -1 -10.7 -1.2 -6.5 -0.1 -8.9 0.1 -8.3 0.9 1 1.2 19 1.5 19 0.3z"/>
      <path d="M434 164 c0 -0.6 4.4 -3 5.5 -3 0.3 0 0.5 0.8 0.5 1.8 0 1.4 -0.8 1.9 -3 1.9 -1.6 0 -3 -0.3 -3 -0.7z"/>
      <path d="M437.7 148.4 c-0.8 -0.8 0.1 -2.4 1.4 -2.4 0.5 0 0.9 0.7 0.9 1.5 0 1.5 -1.2 2 -2.3 0.9z"/>
      <path d="M408 141.4 c0 -3.4 1.8 -4.8 4.8 -3.7 1.5 0.6 1.5 0.5 0.3 -1 -0.8 -1.1 -2.1 -1.5 -3.2 -1.2 -1.3 0.4 -1.9 0.1 -1.9 -0.8 0 -1.8 5.6 -1.7 8.6 0.2 1.7 1.1 1.7 1.2 0.1 0.7 -1.2 -0.4 -1.7 -0.2 -1.5 0.6 0.3 0.7 2.1 1.3 4.1 1.4 2 0.2 4.5 0.8 5.6 1.3 1.9 1.1 5.1 0.6 5.1 -0.8 0 -0.4 2.3 -0.7 5 -0.7 5 0 5 0 5 3.3 0 1.8 -0.4 3.4 -1 3.4 -3.9 0.5 -6.7 0.2 -6.4 -0.6 0.5 -1.2 -3.5 -3.9 -4.4 -3 -0.4 0.4 0.2 1.3 1.2 2.1 1.1 0.8 1.8 1.5 1.5 1.5 -0.2 0.1 -5.5 0.2 -11.6 0.3 l-11.3 0.2 0 -3.2z"/>
      <path d="M432 136.2 c0 -0.4 -2.4 -0.8 -5.2 -0.8 -3.3 -0.1 -6.9 -0.9 -9.5 -2.2 -2.3 -1.2 -4.8 -2 -5.5 -1.7 -1.7 0.6 -4.5 -1.1 -3.5 -2.2 0.5 -0.4 7.8 -0.8 16.3 -0.9 l15.4 -0.2 0 3.3 c0 3.4 -1.8 4.9 -4.5 3.9 -0.8 -0.4 -1.5 -0.1 -1.5 0.5 0 0.6 -0.4 1.1 -1 1.1 -0.5 0 -1 -0.3 -1 -0.8z"/>
      <path d="M408.2 124.5 c0.5 -3.3 8.1 -6.5 15.8 -6.5 7.8 0 15.3 3.1 15.8 6.6 0.3 2 0 2.1 -15.8 2 -15.5 -0.1 -16.1 -0.1 -15.8 -2.1z"/>
    </g>
    <g fill="#c12b2b">
      <path d="M410.7 212 c-0.9 -1.3 -1.4 -2.6 -1.2 -2.9 0.9 -0.8 3.8 2.6 3.3 4 -0.3 0.8 -1 0.5 -2.1 -1.1z"/>
      <path d="M415.6 211.2 c-0.2 -0.4 1.1 -0.9 3 -0.9 1.9 -0.1 3.4 0.2 3.4 0.6 0 1 -5.8 1.3 -6.4 0.3z"/>
      <path d="M430.5 193 c-0.3 -1.1 -1.2 -2 -1.9 -2 -0.8 0 -1.9 -0.7 -2.6 -1.5 -0.8 -0.9 -0.8 -1.5 -0.2 -1.5 0.6 0 1.2 -0.8 1.4 -1.9 0.2 -1.5 0.8 -1.7 2.6 -1 1.8 0.7 2.2 1.6 2.2 5.4 0 4.9 -0.5 5.7 -1.5 2.5z"/>
      <path d="M426.6 172.9 c-2.5 -2.9 -3.4 -5.9 -1.8 -5.9 1.6 0.1 6.4 9 4.9 9 -0.3 0 -1.7 -1.4 -3.1 -3.1z"/>
      <path d="M415.6 160.6 c-2.7 -3.6 -3.5 -7.1 -1.3 -6.4 0.6 0.3 1.4 1.3 1.6 2.4 0.2 1 1.2 3.1 2.3 4.7 2.8 3.9 0.5 3.3 -2.6 -0.7z"/>
      <path d="M438.8 158 c-0.3 -1 -1.6 -1.4 -3.9 -1.2 -2.7 0.2 -3.1 0 -1.9 -0.9 1.1 -0.8 1.2 -1.2 0.3 -1.6 -0.7 -0.2 -1.3 -1.3 -1.3 -2.3 0 -1.1 -0.8 -2.3 -1.7 -2.9 -2.4 -1.3 -1 -2.5 2 -1.7 1.5 0.3 3 1.8 3.7 3.7 0.7 1.7 2 3.7 2.7 4.5 0.8 0.8 1.3 2 1 2.7 -0.2 0.8 -0.5 0.8 -0.9 -0.3z"/>
      <path d="M421.2 141.5 c-1.4 -3.1 -1.5 -3.5 -0.4 -3.5 0.8 0 3.2 4.3 3.2 5.5 0 1.5 -1.9 0.1 -2.8 -2z"/>
      <path d="M412.6 135.4 c-0.9 -2.2 0.3 -3.2 1.4 -1.4 1.2 1.9 1.2 3 0.1 3 -0.5 0 -1.2 -0.7 -1.5 -1.6z"/>
      <path d="M430.3 132.8 l-2 -4.3 2.5 -0.2 c1.5 0 2 0.2 1.3 0.7 -1 0.6 -0.9 1.4 0.3 3.8 1.8 3.5 1.9 4.2 0.8 4.2 -0.4 0 -1.7 -1.9 -2.9 -4.2z"/>
      <path d="M437.2 130.9 c-0.7 -1.2 -1.1 -2.3 -0.9 -2.5 0.6 -0.6 3.7 2.5 3.7 3.7 0 1.6 -1.5 1 -2.8 -1.2z"/>
      <path d="M419.5 126.5 c-0.5 -0.2 -2.9 -0.9 -5.2 -1.5 -2.4 -0.6 -4.3 -1.5 -4.3 -1.9 0 -1.5 5.9 -3.1 9 -2.4 3 0.5 4.2 2.3 1.8 2.3 -0.8 0.1 -0.6 0.6 0.5 1.4 2.7 2.1 1.7 3.3 -1.8 2.1z"/>
    </g>
  `;
}

getShitCoinPath() {
  return `
    <g fill="#000000">
      <path d="M450.8 368.7 c-5.4 -1 -8.1 -2.2 -13.9 -6.2 -17.1 -12 -23.9 -23.8 -23.9 -41.4 0 -7.3 1.8 -19.1 3.1 -20.1 0.3 -0.3 1.7 -2.5 2.9 -5 3 -5.9 13.3 -16.1 19.5 -19.3 14.7 -7.4 32.8 -7.7 46.5 -0.7 5.1 2.7 15.3 12.2 18.9 17.8 5.3 8.3 7.4 15.5 7.5 26.2 0 6.8 -0.5 11.1 -1.8 15 -8.3 24.9 -31.9 38.4 -58.8 33.7z m18.4 -5.8 c8.9 -1.9 15.8 -5.8 22.9 -12.8 7.3 -7.3 11 -14.1 13 -23.8 2.4 -11.7 -2.4 -24.7 -13 -35.4 -10.7 -10.6 -24.1 -15.5 -35.8 -13 -9.5 2.1 -16.2 5.9 -23.3 13 -10.5 10.6 -15.2 23.1 -13.1 34.6 3.1 17.2 17 32.4 33.9 37 6 1.7 8.9 1.8 15.4 0.4z"/>
      <path d="M454 320 l0 -6 4.5 0 4.5 0 0 6 0 6 -4.5 0 -4.5 0 0 -6z"/>
      <path d="M466 320 l0 -6 4.5 0 4.5 0 0 6 0 6 -4.5 0 -4.5 0 0 -6z"/>
    </g>
    <g fill="#4b2c17">
      <path d="M441 339.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.3 -1.5 -6 0 -4.7 0.3 -6 1.5 -6 0.8 0 1.5 -0.7 1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 1 0 1.5 -1 1.5 -3 0 -2 0.5 -3 1.5 -3 1 0 1.5 -1 1.5 -3 0 -2.3 0.4 -3 2 -3 1.3 0 2 -0.7 2 -2 0 -1.1 0.7 -2 1.5 -2 1 0 1.5 -1 1.5 -3 0 -2 0.5 -3 1.5 -3 0.8 0 1.5 -0.7 1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.1 1.2 -1.5 4.5 -1.5 3.3 0 4.5 0.4 4.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 0.9 1.5 2 0 1.1 0.7 2 1.5 2 1 0 1.5 1 1.5 3 0 2 0.5 3 1.5 3 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.1 0 1.5 1.2 1.5 4.5 0 3.3 0.4 4.5 1.5 4.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.3 1.5 6 0 4.7 -0.3 6 -1.5 6 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.3 -3.2 1.5 -23 1.5 -19.8 0 -23 -0.2 -23 -1.5z m25 -9 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.9 -1.5 -2 0 -1.1 -0.7 -2 -1.5 -2 -1.1 0 -1.5 -1.1 -1.5 -4 0 -2.9 -0.4 -4 -1.5 -4 -1.1 0 -1.5 1.2 -1.5 4.5 0 3.3 0.4 4.5 1.5 4.5 1 0 1.5 1 1.5 3 0 2.7 0.3 3 3 3 2 0 3 -0.5 3 -1.5z m6 -10.5 c0 -2 -0.5 -3 -1.5 -3 -1 0 -1.5 1 -1.5 3 0 2 0.5 3 1.5 3 1 0 1.5 -1 1.5 -3z"/>
 </g>
 <g fill="#8c5425">
  <path d="M441 336.5 c0 -0.8 0.7 -1.5 1.5 -1.5 1 0 1.5 -1 1.5 -3 0 -2 -0.5 -3 -1.5 -3 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 1.1 1.2 1.5 5 1.5 3.8 0 5 0.4 5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.9 -1.5 -2 -1.5 -1.6 0 -2 -0.7 -2 -3 0 -2 -0.5 -3 -1.5 -3 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.9 1.5 2 1.5 1.6 0 2 -0.7 2 -3 0 -2 -0.5 -3 -1.5 -3 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 -0.9 1.5 -2 0 -1.1 -0.7 -2 -1.5 -2 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 1 1 1.5 3 1.5 2.3 0 3 0.4 3 2 0 1.6 0.7 2 3 2 2.3 0 3 -0.4 3 -2 0 -1.6 -0.7 -2 -3 -2 -2 0 -3 -0.5 -3 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 0.9 1.5 2 0 1.1 0.7 2 1.5 2 0.8 0 1.5 -0.7 1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.1 0 -1.5 1.2 -1.5 4.5 0 3.3 -0.4 4.5 -1.5 4.5 -1 0 -1.5 1 -1.5 3 0 2 -0.5 3 -1.5 3 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 0.7 1.5 1.5 0 1.1 -1.2 1.5 -4.5 1.5 -3.3 0 -4.5 -0.4 -4.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.7 1.5 -9.5 1.5 -7.8 0 -9.5 0.3 -9.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5z m19 -16.5 c0 -2 -0.5 -3 -1.5 -3 -1 0 -1.5 1 -1.5 3 0 2 0.5 3 1.5 3 1 0 1.5 -1 1.5 -3z m6 0.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 -0.7 1.5 -1.5z m-3 -18 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 -0.7 1.5 -1.5z"/>
  <path d="M484 336.5 c0 -1 -1 -1.5 -3 -1.5 -2 0 -3 -0.5 -3 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 1 0 1.5 -1 1.5 -3 0 -2.7 0.3 -3 3 -3 2 0 3 -0.5 3 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1 0 -1.5 1 -1.5 3 0 2 -0.5 3 -1.5 3 -0.8 0 -1.5 0.7 -1.5 1.5 0 1 1 1.5 3 1.5 2 0 3 -0.5 3 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1 0 -1.5 1 -1.5 3 0 2 0.5 3 1.5 3 0.8 0 1.5 0.7 1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5z m0 -9 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 0.8 0 1.5 -0.7 1.5 -1.5z"/>
 </g>
 <g fill="#efa027">
  <path d="M450.8 365.5 c-12.5 -3.4 -23.7 -12.7 -29.6 -24.5 -9.3 -18.7 -6.1 -38.1 8.8 -53.1 14.6 -14.7 34.6 -18 53.7 -8.8 6.2 2.9 17.3 14 20.2 20.2 6.7 14 6.7 28.4 0 42.4 -3.1 6.6 -14.1 17.4 -20.9 20.5 -10.2 4.7 -22.5 6 -32.2 3.3z m24.7 -13.9 c7.6 -3.8 14.3 -10.5 18.1 -18.1 2.5 -5.1 2.9 -7.2 2.9 -14 0 -6.8 -0.4 -8.9 -2.9 -14 -3.8 -7.6 -10.5 -14.3 -18.1 -18.1 -5.1 -2.5 -7.2 -2.9 -14 -2.9 -6.8 0 -8.9 0.4 -14 2.9 -16.8 8.3 -25.5 27.2 -19.6 42.6 7.9 20.6 29.5 30.4 47.6 21.6z"/>
 </g>
 <g fill="#f4bd2d">
  <path d="M454.7 358 c-20.3 -3.5 -35 -24.1 -31.7 -44.3 4.2 -26.3 32.1 -40.7 55.9 -29 18.3 8.9 26.7 32 18.3 50.5 -7.4 16.4 -24.9 25.8 -42.5 22.8z m29.3 -21.5 c0 -0.8 0.7 -1.5 1.5 -1.5 1 0 1.5 -1 1.5 -3 0 -2 -0.5 -3 -1.5 -3 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.1 0 -1.5 -1.2 -1.5 -4.5 0 -3.3 -0.4 -4.5 -1.5 -4.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1 0 -1.5 -1 -1.5 -3 0 -2 -0.5 -3 -1.5 -3 -0.8 0 -1.5 -0.9 -1.5 -2 0 -1.1 -0.7 -2 -1.5 -2 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1 0 -1.5 1 -1.5 3 0 2 -0.5 3 -1.5 3 -0.8 0 -1.5 0.9 -1.5 2 0 1.3 -0.7 2 -2 2 -1.6 0 -2 0.7 -2 3 0 2 -0.5 3 -1.5 3 -1 0 -1.5 1 -1.5 3 0 2 -0.5 3 -1.5 3 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1 0 -1.5 1 -1.5 3 0 2 0.5 3 1.5 3 0.8 0 1.5 0.7 1.5 1.5 0 1.3 2.9 1.5 20 1.5 17.1 0 20 -0.2 20 -1.5z"/>
 </g>
 <g fill="#ffffff">
  <path d="M460 333.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5 0 -1.2 1.5 -1.5 7.5 -1.5 6 0 7.5 0.3 7.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.1 -1.2 1.5 -4.5 1.5 -3.3 0 -4.5 -0.4 -4.5 -1.5z"/>
  <path d="M457 324.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -1 0 -1.5 -1 -1.5 -3 0 -2 0.5 -3 1.5 -3 0.8 0 1.5 -0.7 1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1 0 1.5 1 1.5 3 0 2 -0.5 3 -1.5 3 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5z m3 -4.5 c0 -2 -0.5 -3 -1.5 -3 -1 0 -1.5 1 -1.5 3 0 2 0.5 3 1.5 3 1 0 1.5 -1 1.5 -3z"/>
  <path d="M469 324.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -1 0 -1.5 -1 -1.5 -3 0 -2 0.5 -3 1.5 -3 0.8 0 1.5 -0.7 1.5 -1.5 0 -0.8 0.7 -1.5 1.5 -1.5 0.8 0 1.5 0.7 1.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1 0 1.5 1 1.5 3 0 2 -0.5 3 -1.5 3 -0.8 0 -1.5 0.7 -1.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -0.8 0 -1.5 -0.7 -1.5 -1.5z m3 -4.5 c0 -2 -0.5 -3 -1.5 -3 -1 0 -1.5 1 -1.5 3 0 2 0.5 3 1.5 3 1 0 1.5 -1 1.5 -3z"/>
 </g>
  `;
}       

        getPet() {
    const blockTime = new Date(this.blockData.time);
    const hours = blockTime.getHours();
    const minutes = blockTime.getMinutes();
    const month = blockTime.getMonth() + 1; // JavaScript months are 0-indexed

    // Parrot condition
    if ((this.traits.outline === "base" || this.traits.outline.startsWith("female")) && 
        hours === 0 && minutes < 60) {
      let color;
      if (minutes >= 0 && minutes <= 9) color = "#5e8822";
      else if (minutes >= 10 && minutes <= 19) color = "#cb0202";
      else if (minutes >= 20 && minutes <= 29) color = "#e66e17";
      else if (minutes >= 30 && minutes <= 39) color = "#b9f2ff";
      else if (minutes >= 40 && minutes <= 49) color = "#0107c0";
      else if (minutes >= 50 && minutes <= 59) color = "#c91fc6";
      return { type: "parrot", color: color };
    }

    // Cat condition
    if (this.traits.outline === "armOut" && this.blockData.txCount === 1) {
      let color;
      if (month <= 2) color = "#c27e11";
      else if (month <= 4) color = "#e8e855";
      else if (month <= 6) color = "#546be0";
      else if (month <= 8) color = "#ce0a0a";
      else if (month <= 10) color = "#e863b3";
      else color = "#b9f2ff";
      return { type: "cat", color: color };
    }

    // Moon Dog condition
    if (blockTime.getFullYear() === 2011) {
      return { type: "moonDog", color: "#c29042" };
    }

    return null;
  }

  addPet() {
    const pet = this.getPet();
    if (!pet) return;

    let petPath;
    switch (pet.type) {
      case "parrot":
        if (this.traits.outline.startsWith("female")) {
          petPath = this.getFemaleParrotPath();
          this.draw.path(petPath).fill(pet.color);
          this.addFemaleParrotEye();
          this.addFemaleParrotBeak();
        } else {
          petPath = this.getBaseParrotPath();
          this.draw.path(petPath).fill(pet.color);
          this.addBaseParrotEye();
          this.addBaseParrotBeak();
        }
        break;
      case "cat":
        petPath = this.getCatPath();
        this.draw.path(petPath).fill(pet.color);
        break;
      case "moonDog":
        petPath = this.getMoonDogPath();
        this.draw.path(petPath).fill(pet.color);
        break;
    }
  }

  getBaseParrotPath() {
    return "M368 256 l0 -32 8 0 8 0 0 -8 0 -8 16 0 16 0 0 5.5 c0 4.2 0.3 5.5 1.5 5.5 1.2 0 1.5 1.6 1.5 8 0 6.4 -0.3 8 -1.5 8 -0.9 0 -1.5 0.9 -1.5 2.5 0 2.5 -0.1 2.5 -8 2.5 l-8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -32z m42 -40 l0 -4 -4 0 -4 0 0 4 0 4 4 0 4 0 0 -4z";
  }

  getFemaleParrotPath() {
    return "M352 272 l0 -32 8 0 8 0 0 -8 0 -8 16 0 16 0 0 5.5 c0 4.2 0.3 5.5 1.5 5.5 1.2 0 1.5 1.6 1.5 8 0 6.4 -0.3 8 -1.5 8 -0.9 0 -1.5 0.9 -1.5 2.5 0 2.5 -0.1 2.5 -8 2.5 l-8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -32z m42 -40 l0 -4 -4 0 -4 0 0 4 0 4 4 0 4 0 0 -4z";
  }

  getCatPath() {
    return "M400 271.5 l0 -10.5 3.5 0 3.5 0 0 -10 0 -10 -3.5 0 c-3.2 0 -3.5 -0.2 -3.5 -3 l0 -3 -6.5 0 -6.5 0 0 -13.5 0 -13.5 3.5 0 3.5 0 0 -9.5 0 -9.5 6.5 0 6.5 0 0 3 c0 2.8 0.3 3 3.5 3 3.2 0 3.5 0.2 3.5 3 l0 3 10 0 10 0 0 -3 c0 -2.8 0.3 -3 3.5 -3 3.2 0 3.5 -0.2 3.5 -3 l0 -3 6 0 6 0 0 9.5 0 9.5 4 0 4 0 0 13.5 0 13.5 -7 0 -7 0 0 3 c0 2.8 -0.3 3 -3.5 3 l-3.5 0 0 10 0 10 3.5 0 3.5 0 0 10.5 0 10.5 -6.5 0 -6.5 0 0 -10 0 -10 -3.5 0 -3.5 0 0 10 0 10 -3 0 -3 0 0 -10 0 -10 -3.5 0 -3.5 0 0 10 0 10 -7 0 -7 0 0 -10.5z m27 -40.5 c0 -2.7 -0.3 -3 -3 -3 -2.7 0 -3 0.3 -3 3 0 2.7 0.3 3 3 3 2.7 0 3 -0.3 3 -3z m-19 -8.5 l0 -6.5 -3.5 0 -3.5 0 0 6.5 0 6.5 3.5 0 3.5 0 0 -6.5z m39 0 l0 -6.5 -3.5 0 -3.5 0 0 6.5 0 6.5 3.5 0 3.5 0 0 -6.5z";
  }

  getMoonDogPath() {
    return "M426.3 78.5 c-0.7 -0.8 -1.3 -2.1 -1.3 -3 0 -0.9 -0.9 -1.5 -2.5 -1.5 -1.8 0 -2.5 -0.5 -2.5 -2 0 -1.1 -0.4 -2 -1 -2 -0.5 0 -1 -1.8 -1 -4.1 0 -3.9 1.7 -6.9 3.9 -6.9 0.6 0 1.1 -0.4 1.1 -1 0 -0.6 4 -1 10 -1 6 0 10 0.4 10 1 0 0.6 0.5 1 1.1 1 2.2 0 3.9 3 3.9 6.9 0 2.3 -0.4 4.1 -1 4.1 -0.5 0 -1 0.9 -1 2 0 1.5 -0.7 2 -2.5 2 -1.6 0 -2.5 0.6 -2.5 1.6 0 0.8 -0.6 2.2 -1.4 3 -1.9 1.9 -11.7 1.8 -13.3 -0.1z m11.2 -2 c1.4 -1.3 2.5 -3.1 2.5 -4 0 -0.9 0.4 -1.4 0.9 -1.1 1.6 1 4.1 -0.5 4.1 -2.5 0 -1 0.5 -1.9 1 -1.9 0.6 0 1 -0.5 1 -1 0 -1.4 -4.6 -6 -6 -6 -0.5 0 -1 -0.4 -1 -1 0 -0.6 -3 -1 -7 -1 -4 0 -7 0.4 -7 1 0 0.6 -0.5 1 -1 1 -1.4 0 -6 4.6 -6 6 0 0.5 0.5 1 1 1 0.6 0 1 0.9 1 2 0 1.9 1 2.4 3.8 2.1 0.6 -0.1 1.2 0.5 1.2 1.4 0 2.4 4.2 6.4 6.8 6.4 1.3 0.1 3.4 -1 4.7 -2.4z";
  }

  addBaseParrotEye() {
    const eyePath = "M399 216 l0 -7 7 0 7 0 0 7 0 7 -7 0 -7 0 0 -7z";
    this.draw.path(eyePath).fill("#000000");
  }

  addBaseParrotBeak() {
    const beakPath = "M416 227 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z";
    this.draw.path(beakPath).fill("#efa027");
  }

  addFemaleParrotEye() {
    const eyePath = "M383 232 l0 -7 7 0 7 0 0 7 0 7 -7 0 -7 0 0 -7z";
    this.draw.path(eyePath).fill("#000000");
  }

  addFemaleParrotBeak() {
    const beakPath = "M400 243 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z";
    this.draw.path(beakPath).fill("#efa027");
  }

addGlow() {
    const glowType = this.traits.glow;
    if (!glowType) return;

    switch (glowType) {
      case "greenGlow":
      case "blueGlow":
        this.addSingleColorGlow(glowType);
        break;
      case "greenGlow2":
      case "blueGlow2":
        this.addSingleColorGlow(glowType, true);
        break;
      case "fireGlow":
      case "fireGlow2":
        this.addFireGlow(glowType === "fireGlow2");
        break;
      case "diamondGlow":
      case "diamondGlow2":
        this.addDiamondGlow(glowType === "diamondGlow2");
        break;
      case "pinkGlow":
      case "pinkGlow2":
        this.addPinkGlow(glowType === "pinkGlow2");
        break;
    }
  }

  addSingleColorGlow(glowType, isLongHair = false) {
    const color = glowType.startsWith("green") ? "#00ff00" : "#1a6afd";
    const path = isLongHair ? this.getLongHairGlowPath() : this.getShortHairGlowPath();
    this.draw.path(path).fill(color).opacity(0.5);
  }

  addFireGlow(isLongHair = false) {
    const paths = isLongHair ? this.getFireGlow2Paths() : this.getFireGlowPaths();
    
    paths.red.forEach(path => this.draw.path(path).fill("#f10700").opacity(0.5));
    paths.orange.forEach(path => this.draw.path(path).fill("#fa6406").opacity(0.3));
    paths.yellow.forEach(path => this.draw.path(path).fill("#fdd701").opacity(0.2));
  }

  addDiamondGlow(isLongHair = false) {
    const path = isLongHair ? this.getLongHairGlowPath() : this.getShortHairGlowPath();
    this.draw.path(path).fill("#b9f2ff").opacity(0.5);
  }

  addPinkGlow(isPonytail = false) {
    const path = isPonytail ? this.getPinkGlow2Path() : this.getPinkGlowPath();
    this.draw.path(path).fill("#ff0faf").opacity(0.5);
  }

  getShortHairGlowPath() {
    return `
      M80 496 l0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -56 0 -56 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 56 0 56 8 0 8 0 0 8 0 8 8 0 8 0 0 40 0 40 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 18 0 18 0 0 8 0 8 6 0 6 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 -40 0 -40 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -56 0 -56 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -56 0 -56 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 56 0 56 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 40 0 40 8 0 8 0 0 8 0 8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -16z
      M240 488 l0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 24 0 24 -8 0 -8 0 0 -24 0 -24 -8 0 -8 0 0 24 0 24 -8 0 -8 0 0 -24z
    `;
  }

  getLongHairGlowPath() {
   return `
      M80 496 l0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -48 0 -48 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 64 0 64 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 40 0 40 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 -40 0 -40 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -64 0 -64 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -56 0 -56 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 40 0 40 8 0 8 0 0 8 0 8 -16 0 -16 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 40 0 40 8 0 8 0 0 8 0 8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -16z
      M224 488 l0 -24 24 0 24 0 0 24 0 24 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -24z
    `;
  }


   getFireGlowPaths() {
    return {
      red: [
        `M96 457.5 l0 -9.5 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 -24 0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.2 0 -1.5 -1.6 -1.5 -8 l0 -8 -5 0 -5 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 21 0 21 8 0 8 0 0 16 0 16 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 1.2 1.6 1.5 8 1.5 l8 0 0 8 0 8 9.5 0 9.5 0 0 9.5 0 9.5 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 6.5 c0 5.1 -0.3 6.5 -1.5 6.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.6 1.5 -8 1.5 l-8 0 0 -9.5z`,
        `M416 465.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -9.5 0 -9.5 9.5 0 9.5 0 0 -8 0 -8 8 0 c6.4 0 8 -0.3 8 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -16 0 -16 8 0 8 0 0 -21 0 -21 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -9.5 0 -9.5 9.5 0 9.5 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 24 0 24 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 9.5 0 9.5 -8 0 c-6.4 0 -8 -0.3 -8 -1.5z`,
        `M384 289.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.7 -1.5 -9.5 l0 -9.5 8 0 8 0 0 -45 0 -45 -8 0 -8 0 0 -8 0 -8 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -13 0 -13 0 0 8 0 8 -19 0 -19 0 0 -8 0 -8 -5 0 -5 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 13 0 13 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.6 1.5 8 l0 8 -9.5 0 -9.5 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 8 0 8 0 0 8 0 8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 48 0 48 -8 0 -8 0 0 8 c0 6.4 0.3 8 1.5 8 0.8 0 1.5 0.7 1.5 1.5 0 1.2 -1.7 1.5 -9.5 1.5 -7.8 0 -9.5 -0.3 -9.5 -1.5z`
      ],
      orange: [
        `M96 472 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 9.5 0 9.5 0 0 8 c0 6.4 -0.3 8 -1.5 8 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 6.5 c0 5.1 -0.3 6.5 -1.5 6.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 6.5 0 6.5 -9.5 0 -9.5 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
  <path d="M416 472 l0 -8 -9.5 0 -9.5 0 0 -6.5 0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.6 -1.5 -8 l0 -8 9.5 0 9.5 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z`,
        `M96 390.5 l0 -9.5 8 0 8 0 0 9.5 0 9.5 -8 0 -8 0 0 -9.5z`,
        `M416 390.5 l0 -9.5 8 0 8 0 0 9.5 0 9.5 -8 0 -8 0 0 -9.5z`,
        `M96 369.5 c0 -1.2 -1.6 -1.5 -8 -1.5 l-8 0 0 -24 0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 9.5 0 9.5 -6.5 0 -6.5 0 0 6.5 c0 5.1 -0.3 6.5 -1.5 6.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 24 c0 20.7 -0.2 24 -1.5 24 -0.8 0 -1.5 -0.7 -1.5 -1.5z`,
        `M429 347 l0 -24 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -1.2 -1.6 -1.5 -8 -1.5 l-8 0 0 -8 0 -8 -8 0 -8 0 0 -9.5 0 -9.5 6.5 0 6.5 0 0 -45 0 -45 -6.5 0 -6.5 0 0 -9.5 0 -9.5 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -9.5 0 -9.5 0 0 -6.5 0 -6.5 -8 0 -8 0 0 -8 0 -8 -13 0 -13 0 0 8 0 8 -19 0 -19 0 0 -8 0 -8 -5 0 -5 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 14.5 c0 12.2 -0.2 14.5 -1.5 14.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 6.5 c0 5.1 -0.3 6.5 -1.5 6.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 29 0 29 6.5 0 6.5 0 0 9.5 0 9.5 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 48 0 48 -8 0 -8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 24 0 24 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.3 0 -1.5 -3.3 -1.5 -24z`
      ],
      yellow: [
        `M128 456 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z`,
        `M384 456 l0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z`,
        `M96 352 l0 -32 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 32 0 32 -8 0 -8 0 0 -32z`,
        `M416 352 l0 -32 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 32 0 32 -8 0 -8 0 0 -32z`,
        `M368 224 l0 -48 8 0 8 0 0 48 0 48 -8 0 -8 0 0 -48z`,
        `M160 208 l0 -32 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 -48 0 -48 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 32 0 32 -8 0 -8 0 0 -32z`        
      ]
    };
  }

  getFireGlow2Paths() {
  return {
    red: [
      "M96 457.5 l0 -9.5 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 -24 0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.2 0 -1.5 -1.6 -1.5 -8 l0 -8 -5 0 -5 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 21 0 21 8 0 8 0 0 16 0 16 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 1.2 1.6 1.5 8 1.5 l8 0 0 8 0 8 9.5 0 9.5 0 0 9.5 0 9.5 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 6.5 c0 5.1 -0.3 6.5 -1.5 6.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.6 1.5 -8 1.5 l-8 0 0 -9.5z",
      "M416 465.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -9.5 0 -9.5 9.5 0 9.5 0 0 -8 0 -8 8 0 c6.4 0 8 -0.3 8 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -16 0 -16 8 0 8 0 0 -21 0 -21 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -9.5 0 -9.5 9.5 0 9.5 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 24 0 24 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 9.5 0 9.5 -8 0 c-6.4 0 -8 -0.3 -8 -1.5z",
      "M384 289.5 c0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.7 -1.5 -9.5 l0 -9.5 8 0 8 0 0 -45 0 -45 -8 0 -8 0 0 -8 0 -8 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -13 0 -13 0 0 8 0 8 -19 0 -19 0 0 -8 0 -8 -5 0 -5 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 13 0 13 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.6 1.5 8 l0 8 -9.5 0 -9.5 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 8 0 8 0 0 8 0 8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 48 0 48 -8 0 -8 0 0 8 c0 6.4 0.3 8 1.5 8 0.8 0 1.5 0.7 1.5 1.5 0 1.2 -1.7 1.5 -9.5 1.5 -7.8 0 -9.5 -0.3 -9.5 -1.5z"
    ],
    orange: [
      "M96 472 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 9.5 0 9.5 0 0 8 c0 6.4 -0.3 8 -1.5 8 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 6.5 c0 5.1 -0.3 6.5 -1.5 6.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 6.5 0 6.5 -9.5 0 -9.5 0 0 8 0 8 -8 0 -8 0 0 -8z",
      "M416 472 l0 -8 -9.5 0 -9.5 0 0 -6.5 0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.6 -1.5 -8 l0 -8 9.5 0 9.5 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z",
      "M96 390.5 l0 -9.5 8 0 8 0 0 9.5 0 9.5 -8 0 -8 0 0 -9.5z",
      "M416 390.5 l0 -9.5 8 0 8 0 0 9.5 0 9.5 -8 0 -8 0 0 -9.5z",
      "M96 369.5 c0 -1.2 -1.6 -1.5 -8 -1.5 l-8 0 0 -24 0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 9.5 0 9.5 -6.5 0 -6.5 0 0 6.5 c0 5.1 -0.3 6.5 -1.5 6.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 24 c0 20.7 -0.2 24 -1.5 24 -0.8 0 -1.5 -0.7 -1.5 -1.5z",
      "M429 347 l0 -24 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -0.8 -0.7 -1.5 -1.5 -1.5 -1.2 0 -1.5 -1.4 -1.5 -6.5 l0 -6.5 -6.5 0 c-5.1 0 -6.5 -0.3 -6.5 -1.5 0 -1.2 -1.6 -1.5 -8 -1.5 l-8 0 0 -8 0 -8 -8 0 -8 0 0 -9.5 0 -9.5 6.5 0 6.5 0 0 -24 0 -24 9.5 0 9.5 0 0 25.5 0 25.5 -8 0 -8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 24 0 24 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.3 0 -1.5 -3.3 -1.5 -24z",
      "M176 264 l0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 c0 6.4 0.3 8 1.5 8 0.8 0 1.5 0.7 1.5 1.5 0 1.2 -1.7 1.5 -9.5 1.5 l-9.5 0 0 -9.5 0 -9.5 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -9.5 0 -9.5 0 0 -6.5 0 -6.5 -8 0 -8 0 0 -8 0 -8 -13 0 -13 0 0 8 0 8 -19 0 -19 0 0 -8 0 -8 -5 0 -5 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 14.5 c0 12.2 -0.2 14.5 -1.5 14.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 6.5 c0 5.1 -0.3 6.5 -1.5 6.5 -0.8 0 -1.5 0.7 -1.5 1.5 0 1.2 -1.4 1.5 -6.5 1.5 l-6.5 0 0 29 0 29 8 0 c6.4 0 8 0.3 8 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.2 0 -1.5 1.6 -1.5 8 l0 8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"
    ],
    yellow: [
      "M128 456 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z",
      "M384 456 l0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z",
      "M96 352 l0 -32 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 32 0 32 -8 0 -8 0 0 -32z",
      "M416 352 l0 -32 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 32 0 32 -8 0 -8 0 0 -32z",
      "M368 246.5 l0 -25.5 9.5 0 c7.8 0 9.5 0.3 9.5 1.5 0 0.8 -0.7 1.5 -1.5 1.5 -1.3 0 -1.5 3.3 -1.5 24 l0 24 -8 0 -8 0 0 -25.5z",
      "M160 208 l0 -32 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 -8 0 -8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 -48 0 -48 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 24 c0 20.7 0.2 24 1.5 24 1.2 0 1.5 1.6 1.5 8 l0 8 -9.5 0 -9.5 0 0 -32z"
    ]
  };
}
  getPinkGlowPath() {
    return `
      M80 496 l0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -56 0 -56 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 56 0 56 8 0 8 0 0 8 0 8 8 0 8 0 0 40 0 40 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 18 0 18 0 0 8 0 8 6 0 6 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 -40 0 -40 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -56 0 -56 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -56 0 -56 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 56 0 56 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 40 0 40 8 0 8 0 0 8 0 8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -16z
      M224 488 l0 -24 24 0 24 0 0 24 0 24 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -24z
    `;
  }


  getPinkGlow2Path() {
    return `
      M80 496 l0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -48 0 -48 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 24 0 24 0 0 8 0 8 8 0 8 0 0 -8 0 -8 56 0 56 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 56 0 56 8 0 8 0 0 8 0 8 8 0 8 0 0 40 0 40 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 18 0 18 0 0 8 0 8 6 0 6 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 -40 0 -40 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -56 0 -56 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -56 0 -56 0 0 8 0 8 -8 0 -8 0 0 -8 0 -8 -24 0 -24 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 48 0 48 8 0 8 0 0 8 0 8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 16 0 16 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 40 0 40 8 0 8 0 0 8 0 8 24 0 24 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -16z
      M224 488 l0 -24 24 0 24 0 0 24 0 24 -8 0 -8 0 0 -16 0 -16 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -24z
    `;
  }


        addPrisonerOutfit() {
  const prisonerPath = `
    <g fill="#ef7721">
      <path d="M160 456 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 c7.3 0 8 -0.2 8 -2 0 -2 0.7 -2 56 -2 55.3 0 56 0 56 2 0 1.8 0.7 2 8 2 l8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -40 0 -40 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -40 0 -40 0 0 -8z"/>
      <path d="M207.8 361.3 l-0.3 -40.8 -7.5 0 -7.5 0 -0.3 7.7 -0.3 7.7 -7.7 0.3 -7.7 0.3 -0.3 15.8 -0.3 15.7 -23.9 0 -24 0 0 -24 0 -23.9 7.8 -0.3 7.7 -0.3 0.3 -7.7 0.3 -7.7 7.7 -0.3 7.7 -0.3 0.3 -7.7 0.3 -7.8 31.9 0 32 0 0 8 0 8 8 0 8 0 0 8 c0 6.4 0.3 8 1.5 8 1.2 0 1.5 1.4 1.5 6.5 l0 6.5 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.4 1.5 6.5 l0 6.5 5 0 5 0 0 -6.5 c0 -5.1 0.3 -6.5 1.5 -6.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -6.5 0 -6.5 17.5 0 17.5 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 15.9 0 0.3 7.8 0.3 7.7 7.8 0.3 7.7 0.3 0 7.9 0 8 8 0 8 0 0 24 0 24 -24 0 -24 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 41 0 41 -56 0 -56 0 -0.2 -40.7z"/>
    </g>
    <g fill="#d2712c">
      <path d="M208 407 l0 -8 56 0 56 0 0 8 0 8 -56 0 -56 0 0 -8z"/>
    </g>
    <g fill="#ffffff">
      <path d="M256 344 l0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
    </g>
  `;
  this.draw.svg(prisonerPath);
}

addScienceOutfit() {
  const sciencePath = `
    <g fill="#ffffff">
      <path d="M205 425.5 c0 -7.8 0.3 -9.5 1.5 -9.5 1.3 0 1.5 -2.7 1.5 -18 l0 -18 17.5 0 17.5 0 0 27.5 0 27.5 -19 0 -19 0 0 -9.5z"/>
      <path d="M285 407.5 l0 -27.5 17.5 0 17.5 0 0 18 c0 15.3 0.2 18 1.5 18 1.2 0 1.5 1.7 1.5 9.5 l0 9.5 -19 0 -19 0 0 -27.5z"/>
      <path d="M128 344 l0 -24 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 32 0 32 0 0 8 0 8 8 0 8 0 0 8 c0 6.4 0.3 8 1.5 8 1.3 0 1.5 2.6 1.5 17 l0 17 -17.5 0 -17.5 0 0 -17 0 -17 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -24 0 -24 0 0 -24z"/>
      <path d="M352 352 l0 -16 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 17.5 0 17.5 -5.3 0 c-3 0 -10.9 -0.3 -17.5 -0.7 l-12.2 -0.6 0 -16.9 0 -16.8 17.5 0 17.5 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 24 0 24 -24 0 -24 0 0 -16z"/>
    </g>
    <g fill="#5e5b50">
      <path d="M160 456 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 -9.5 0 -9.5 24 0 24 0 0 9.5 0 9.5 16 0 16 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 -40 0 -40 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -40 0 -40 0 0 -8z"/>
      <path d="M240 393 c0 -8.2 -0.3 -10 -1.5 -10 -1.3 0 -1.5 -2.4 -1.5 -16 0 -13.6 0.2 -16 1.5 -16 1.3 0 1.5 -2.4 1.5 -15.5 l0 -15.5 24 0 24 0 0 15.5 c0 13.1 0.2 15.5 1.5 15.5 1.3 0 1.5 2.4 1.5 16 0 13.6 -0.2 16 -1.5 16 -1.2 0 -1.5 1.8 -1.5 10 l0 10 -24 0 -24 0 0 -10z"/>
      <path d="M301 360.9 c0 -10 0 -10.1 2.3 -9.5 1.2 0.3 5.5 0.6 9.5 0.6 l7.2 0 0 9.5 0 9.5 -9.5 0 -9.5 0 0 -10.1z"/>
    </g>
    <g fill="#eaeaea">
      <path d="M208 367 l0 -16 16 0 16 0 0 16 0 16 -16 0 -16 0 0 -16z"/>
      <path d="M288 367 l0 -16 8 0 8 0 0 8.5 0 8.5 8 0 8 0 0 7.5 0 7.5 -16 0 -16 0 0 -16z"/>
    </g>
    <g fill="#3d2d1d">
      <path d="M240 408 l0 -8 9.5 0 9.5 0 0 8 0 8 -9.5 0 -9.5 0 0 -8z"/>
      <path d="M269 408 l0 -8 9.5 0 9.5 0 0 8 0 8 -9.5 0 -9.5 0 0 -8z"/>
    </g>
    <g fill="#ca9a00">
      <path d="M256 408 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
    </g>
  `;
  this.draw.svg(sciencePath);
}

addTrackSuit() {
  const trackSuitPath = `
    <g fill="#3d6491">
      <path d="M173 457.5 c0 -7.8 0.3 -9.5 1.5 -9.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -6.5 c0 -5.1 0.3 -6.5 1.5 -6.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -6.5 c0 -5.1 0.3 -6.5 1.5 -6.5 1.3 0 1.5 -6 1.5 -48 l0 -48 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -24 0 -24 0 0 -9.5 0 -9.5 6.5 0 6.5 0 0 -14.5 c0 -12.2 0.2 -14.5 1.5 -14.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -6.5 c0 -5.1 0.3 -6.5 1.5 -6.5 0.8 0 1.5 -0.7 1.5 -1.5 0 -1.2 1.4 -1.5 6.5 -1.5 l6.5 0 0 -6.5 0 -6.5 25.5 0 25.5 0 0 8 0 8 8 0 8 0 0 8 0 8 9.5 0 9.5 0 0 38.5 0 38.5 5 0 5 0 0 -38.5 0 -38.5 25.5 0 25.5 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 9.5 0 9.5 0 0 6.5 0 6.5 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.4 1.5 6.5 l0 6.5 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.3 0 1.5 2.3 1.5 14.5 l0 14.5 6.5 0 6.5 0 0 9.5 0 9.5 -24 0 -24 0 0 -16 0 -16 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 48 c0 42 0.2 48 1.5 48 1.2 0 1.5 1.4 1.5 6.5 l0 6.5 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.4 1.5 6.5 l0 6.5 6.5 0 c5.1 0 6.5 0.3 6.5 1.5 0 0.8 0.7 1.5 1.5 1.5 1.2 0 1.5 1.7 1.5 9.5 l0 9.5 -25.5 0 c-22 0 -25.5 -0.2 -25.5 -1.5 0 -1.2 -1.6 -1.5 -8 -1.5 l-8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 c-6.4 0 -8 0.3 -8 1.5 0 1.3 -3.5 1.5 -25.5 1.5 l-25.5 0 0 -9.5z"/>
    </g>
    <g fill="#6ca0ce">
      <path d="M157 465.5 c0 -0.8 0.7 -1.5 1.5 -1.5 1.2 0 1.5 -1.6 1.5 -8 l0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 8 c0 6.4 0.3 8 1.5 8 0.8 0 1.5 0.7 1.5 1.5 0 1.2 -1.9 1.5 -11 1.5 -9.1 0 -11 -0.3 -11 -1.5z"/>
      <path d="M349 465.5 c0 -0.8 0.7 -1.5 1.5 -1.5 1.2 0 1.5 -1.6 1.5 -8 l0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 c0 6.4 0.3 8 1.5 8 0.8 0 1.5 0.7 1.5 1.5 0 1.2 -1.9 1.5 -11 1.5 -9.1 0 -11 -0.3 -11 -1.5z"/>
      <path d="M256 360 l0 -40 8 0 8 0 0 40 0 40 -8 0 -8 0 0 -40z"/>
      <path d="M128 336 l0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 16 0 16 -8 0 -8 0 0 -16z"/>
      <path d="M384 336 l0 -16 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 16 0 16 -8 0 -8 0 0 -16z"/>
    </g>
    <g fill="#ffffff">
      <path d="M140 488 c0 -7.3 0.2 -8 2 -8 1.3 0 2 -0.7 2 -2 0 -1.8 0.8 -2 13.8 -2.2 l13.7 -0.3 0.3 -5.7 0.3 -5.8 25.9 0 26 0 0 16 0 16 -42 0 -42 0 0 -8z"/>
      <path d="M304 480 l0 -16 25 0 24.9 0 0.3 5.8 0.3 5.7 14.8 0.3 c13.9 0.2 14.7 0.4 14.7 2.2 0 1.1 0.5 2 1 2 0.6 0 1 3.3 1 8 l0 8 -41 0 -41 0 0 -16z"/>
    </g>
    <g fill="#eeeeef">
      <path d="M112 488 l0 -8 15.5 0 15.5 0 0 8 0 8 -15.5 0 -15.5 0 0 -8z"/>
      <path d="M382.8 487.8 l-0.3 -8.3 -15.5 -0.5 -15.5 -0.5 -0.3 -7.2 -0.3 -7.3 16.6 0 16.5 0 0 8 0 8 16 0 16 0 0 8 0 8 -16.5 0 -16.4 0 -0.3 -8.2z"/>
      <path d="M144 471.5 l0 -7.5 15.5 0 15.6 0 -0.3 7.3 -0.3 7.2 -15.2 0.3 -15.3 0.3 0 -7.6z"/>
    </g>
  `;
  this.draw.svg(trackSuitPath);
}

addMorphOutfit() {
  const morphPath = `
    <g fill="#000000">
      <path d="M96 496 l0 -16 8 0 8 0 0 -8 0 -8 16 0 16 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 -24 0 -24 0 0 -8 0 -8 -8 0 -8 0 0 -40 0 -40 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 9.5 0 9.5 0 0 9.5 0 9.5 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 37 0 37 21 0 21 0 0 -13 0 -13 -8 0 -8 0 0 -19 0 -19 8 0 8 0 0 -8 0 -8 11 0 11 0 0 24 0 24 8 0 8 0 0 27 0 27 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 5 0 5 69 0 69 0 0 -5 0 -5 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -27 0 -27 8 0 8 0 0 -21 0 -21 -5 0 -5 0 0 8 0 8 -35 0 -35 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -16 0 -16 0 0 -9.5 0 -9.5 17.5 0 17.5 0 0 8 0 8 8 0 8 0 0 8 0 8 32 0 32 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 9.5 0 9.5 0 0 9.5 0 9.5 -8 0 -8 0 0 5 0 5 8 0 8 0 0 8 0 8 8 0 8 0 0 19 0 19 -8 0 -8 0 0 13 0 13 21 0 21 0 0 -37 0 -37 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 -9.5 0 -9.5 9.5 0 9.5 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 40 0 40 -8 0 -8 0 0 8 0 8 -24 0 -24 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 16 0 16 -64 0 -64 0 0 -24 0 -24 -24 0 -24 0 0 24 0 24 -64 0 -64 0 0 -16z m109 -16 l0 -13 -29 0 -29 0 0 8 0 8 -16 0 -16 0 0 5 0 5 45 0 45 0 0 -13z m176 8 l0 -5 -16 0 -16 0 0 -8 0 -8 -29 0 -29 0 0 13 0 13 45 0 45 0 0 -5z m-189 -80 l0 -8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 -8z m128 0 l0 -8 -8 0 -8 0 0 8 0 8 8 0 8 0 0 -8z"/>
    </g>
    <g fill="#ffffff">
      <path d="M112 488 l0 -8 16 0 16 0 0 -8 0 -8 32 0 32 0 0 16 0 16 -48 0 -48 0 0 -8z"/>
      <path d="M288 480 l0 -16 32 0 32 0 0 8 0 8 16 0 16 0 0 8 0 8 -48 0 -48 0 0 -16z"/>
      <path d="M205 417.5 c0 -0.8 0.7 -1.5 1.5 -1.5 1.2 0 1.5 -1.7 1.5 -9.5 l0 -9.5 17.5 0 17.5 0 0 11 0 11 -19 0 c-16.2 0 -19 -0.2 -19 -1.5z"/>
      <path d="M253 408 l0 -11 17.5 0 17.5 0 0 9.5 c0 7.8 0.3 9.5 1.5 9.5 0.8 0 1.5 0.7 1.5 1.5 0 1.3 -2.8 1.5 -19 1.5 l-19 0 0 -11z"/>
      <path d="M128 374.5 l0 -25.5 16 0 16 0 0 9.5 0 9.5 8 0 8 0 0 16 0 16 -24 0 -24 0 0 -25.5z"/>
      <path d="M320 384 l0 -16 8 0 8 0 0 -9.5 0 -9.5 16 0 16 0 0 25.5 0 25.5 -24 0 -24 0 0 -16z"/>
      <path d="M237 367.5 l-12.5 -12.5 -8.2 8.2 c-5.4 5.3 -8.3 7.6 -8.3 6.5 0 -1.5 -1.1 -1.7 -8 -1.7 l-8 0 0 -24 c0 -13.2 0 -24.3 0 -24.7 0 -0.5 1.6 -0.9 3.6 -1.1 3.6 -0.3 4.3 0.2 16.3 12.3 l12.7 12.5 3.4 -3.5 3.4 -3.5 21.6 0 21.6 0 3.4 3.5 3.4 3.5 9.6 -9.5 c5.2 -5.2 10.3 -9.5 11.3 -9.5 1.6 0 1.7 1.8 1.7 22 l0 22 -4.8 0 c-4.5 0 -5.1 -0.3 -11.2 -6.5 l-6.5 -6.5 -12.5 12.5 c-16.7 16.7 -15.4 16.7 -32 0z"/>
    </g>
    <g fill="#f988ae">
      <path d="M176 440 l0 -8 8 0 8 0 0 -8 0 -8 24 0 c20.7 0 24 -0.2 24 -1.5 0 -1.2 1.6 -1.5 8 -1.5 6.4 0 8 0.3 8 1.5 0 1.3 3.3 1.5 24 1.5 l24 0 0 8 0 8 8 0 8 0 0 8 0 8 -72 0 -72 0 0 -8z"/>
      <path d="M240 401.5 c0 -1.3 -2.4 -1.5 -16 -1.5 l-16 0 0 -16 c0 -12 -0.3 -16 -1.2 -16 -0.7 0 3 -4.3 8.2 -9.5 l9.5 -9.5 -14.2 -14.2 c-14.1 -14 -14.2 -14.2 -16.3 -12.3 -2 1.8 -2 1.8 -2 -0.3 0 -2.1 -0.5 -2.2 -8 -2.2 l-8 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -16 0 -16 0 0 -16 0 -16 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 16 0 16 0 0 8 0 8 8 0 8 0 0 8 0 8 6.7 0 6.7 0 -6.4 6.5 -6.5 6.5 14.3 14.3 14.2 14.2 14.2 -14.2 14.3 -14.3 -6.5 -6.5 -6.4 -6.5 9.7 0 9.7 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 -8 0 -8 8 0 8 0 0 8 0 8 8 0 8 0 0 8 0 8 8 0 8 0 0 16 0 16 -16 0 -16 0 0 -8 0 -8 -8 0 -8 0 0 -8 0 -8 -8 0 -8 0 0 3.2 c0 2.8 -1.6 4.8 -11.2 14.5 l-11.3 11.3 9.5 9.5 9.5 9.5 -6.3 0 -6.2 0 0 16 0 16 -16 0 c-13.6 0 -16 0.2 -16 1.5 0 1.2 -1.6 1.5 -8 1.5 -6.4 0 -8 -0.3 -8 -1.5z"/>
    </g>
    <g fill="#ca9708">
      <path d="M240 408 l0 -8 8 0 8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
    </g>
  `;
  this.draw.svg(morphPath);
}

        addShirtLogo() {
          if (!this.traits.shirtLogo) return;

          let logoPath;
          if (this.traits.shirtLogo === "BTCMachine") {
            logoPath = this.traits.outline.startsWith("female") ? 
              this.getFemaleBTCMachineLogo() : 
              this.getBaseBTCMachineLogo();
          } else if (this.traits.shirtLogo === "Pup") {
            logoPath = this.traits.outline.startsWith("female") ? 
              this.getFemalePupLogo() : 
              this.getBasePupLogo();
          }

          if (logoPath) {
            this.draw.svg(logoPath);
          }
        }

        getBaseBTCMachineLogo() {
          return `
            <svg xmlns="http://www.w3.org/2000/svg" width="512px" height="512px" viewBox="0 0 512 512">
              <g fill="#191919">
                <path d="M271 376 l0 -8 -16 0 -16 0 0 -16 0 -16 8 0 8 0 0 8 0 8 24 0 24 0 0 8 0 8 -8 0 -8 0 0 8 0 8 -8 0 -8 0 0 -8z"/>
              </g>
            </svg>`;
        }

        getFemaleBTCMachineLogo() {
          return `
            <svg xmlns="http://www.w3.org/2000/svg" width="512px" height="512px" viewBox="0 0 512 512">
              <g fill="#191919">
                <path d="M248 387.5 l0 -6.5 -13.5 0 -13.5 0 0 -14 0 -14 7 0 7 0 0 6.5 0 6.5 20.5 0 20.5 0 0 7.5 0 7.5 -6.5 0 -6.5 0 0 6.5 0 6.5 -7.5 0 -7.5 0 0 -6.5z"/>
              </g>
            </svg>`;
        }

        getBasePupLogo() {
          return `
            <svg xmlns="http://www.w3.org/2000/svg" width="512px" height="512px" viewBox="0 0 512 512">
              <g fill="#000101">
  <path d="M249 375 c0 -0.5 -1.1 -1 -2.5 -1 -1.4 0 -2.5 -0.4 -2.5 -1 0 -0.5 -0.9 -1 -2 -1 -1.6 0 -2 -0.7 -2 -3.3 0 -2.1 -0.7 -3.8 -2 -4.7 -1.4 -1 -2 -2.6 -2 -5.2 0 -2.1 0.4 -3.8 0.9 -3.8 0.5 0 1.1 -1 1.3 -2.2 l0.3 -2.3 26.3 -0.3 c25.4 -0.2 26.2 -0.2 26.2 1.7 0 1.1 0.9 2.3 2 2.6 3.6 1.1 2.1 13.5 -1.6 13.5 -0.5 0 -1.6 0.9 -2.4 2 -0.8 1.1 -2.2 2 -3.2 2 -1 0 -1.8 0.5 -1.8 1 0 0.6 -1.6 1 -3.5 1 -1.9 0 -3.5 0.5 -3.5 1 0 0.6 -5.3 1 -14 1 -8.7 0 -14 -0.4 -14 -1z m22 -11 c0 -0.5 -0.9 -1 -1.9 -1 -1.1 0 -2.2 -0.6 -2.4 -1.2 -0.3 -0.7 -0.6 -0.3 -0.6 1 -0.1 1.7 0.5 2.2 2.4 2.2 1.4 0 2.5 -0.4 2.5 -1z"/>
 </g>
 <g fill="#002f33">
  <path d="M236 366 c0 -0.5 -1.8 -1 -4 -1 -2.2 0 -4 -0.4 -4 -0.9 0 -0.5 -1.1 -1.2 -2.5 -1.5 -2.4 -0.6 -2.5 -1 -2.5 -8.4 0 -7 0.3 -8 2.9 -10.9 1.6 -1.8 3.6 -3.3 4.5 -3.3 0.9 0 1.6 -0.4 1.6 -1 0 -0.5 0.5 -1 1 -1 0.6 0 2.2 -1.1 3.6 -2.5 1.4 -1.4 3.3 -2.5 4.2 -2.5 1 0 2.4 -0.9 3.2 -2 0.8 -1.1 2.5 -2 3.7 -2 1.3 0 2.3 -0.4 2.3 -1 0 -0.5 1.6 -1 3.5 -1 1.9 0 3.5 -0.4 3.5 -1 0 -0.5 2 -1 4.5 -1 2.5 0 4.5 -0.4 4.5 -1 0 -0.5 1.1 -1 2.5 -1 1.4 0 2.5 0.5 2.5 1 0 0.6 1.6 1 3.5 1 1.9 0 3.5 0.5 3.5 1 0 0.6 1.1 1 2.5 1 1.4 0 2.5 0.5 2.5 1 0 0.6 1.1 1 2.5 1 1.4 0 2.5 0.5 2.5 1 0 0.6 0.8 1 1.8 1 1 0 2.4 0.9 3.2 2 0.9 1.3 2.6 2 4.6 2 1.8 0 3.9 0.7 4.8 1.5 0.8 0.8 2.2 1.5 3.1 1.5 0.9 0 1.8 1.2 2.2 3 0.3 1.7 0.9 3 1.4 3 0.5 0 0.9 1.6 0.9 3.5 0 1.9 -0.4 3.5 -1 3.5 -0.5 0 -1 0.6 -1 1.4 0 2.4 -5.6 7.6 -8.3 7.6 -1.4 0 -2.7 0.7 -3.1 1.5 -0.9 2.4 -4.6 1.9 -4.6 -0.6 0 -1.1 -0.9 -2.8 -2 -3.7 -1.2 -1.1 -2.5 -4 -3.2 -7.7 -0.6 -3.3 -1.7 -6.6 -2.4 -7.3 -0.9 -0.8 -4.9 -1.2 -12.8 -1.2 -7.1 0 -11.6 -0.4 -11.6 -1 0 -0.5 -2 -1 -4.5 -1 -2.5 0 -4.5 0.5 -4.5 1 0 0.6 -0.9 1 -2 1 -1.6 0 -2 0.7 -2 3.5 0 1.9 -0.4 3.5 -1 3.5 -0.5 0 -1 1.1 -1 2.4 0 1.5 -0.7 2.6 -2 2.9 -1.2 0.3 -2 1.4 -2 2.5 0 1.1 -0.6 2.2 -1.2 2.4 -0.9 0.3 -0.8 0.9 0.5 2.2 2.1 2.1 2.1 3.3 0.3 5.2 -1.7 1.6 -4.6 1.9 -4.6 0.4z"/>
 </g>
 <g fill="#7f5a2d">
  <path d="M259 383 c0 -0.5 -1.1 -1 -2.5 -1 -1.4 0 -2.5 -0.4 -2.5 -1 0 -0.5 -0.9 -1 -2 -1 -1.1 0 -2 -0.4 -2 -1 0 -0.5 -0.7 -1 -1.5 -1 -0.8 0 -1.5 -0.4 -1.5 -1 0 -0.5 -0.7 -1 -1.5 -1 -2.8 0 -9.5 -6.4 -9.5 -9 0 -1.7 -0.7 -2 -4 -2 -2.2 0 -4 -0.4 -4 -1 0 -0.5 -1.6 -1.2 -3.5 -1.6 l-3.5 -0.6 0 -6.4 c0 -3.6 0.4 -6.4 1 -6.4 0.6 0 1 -0.6 1 -1.2 0 -1.9 5.9 -8.2 6.8 -7.3 0.4 0.4 0.1 1 -0.5 1.2 -0.7 0.3 -1.3 1.1 -1.3 1.9 0 0.8 -0.4 1.4 -1 1.4 -0.6 0 -1 3 -1 7 0 6.2 0.3 7.4 2.5 9.5 3 3.1 7.1 3.2 9.8 0.3 1.3 -1.6 2.1 -1.9 2.4 -1 0.3 0.6 1.3 1.2 2.4 1.2 1.2 0 1.9 0.7 1.9 2 0 1.1 -0.4 2 -1 2 -0.5 0 -1 0.7 -1 1.5 0 0.8 0.9 1.5 2 1.5 1.1 0 2 0.5 2 1 0 0.6 1.1 1 2.5 1 1.4 0 2.5 0.4 2.5 0.8 0 1.2 17.4 3.6 21.4 2.9 2 -0.3 4.8 -1.7 6.3 -3.1 1.5 -1.4 3.2 -2.6 3.8 -2.6 0.6 0 1.7 -0.9 2.5 -2 0.8 -1.1 1.8 -2 2.3 -2 1.2 0 3.7 -2.7 3.7 -3.9 0 -0.6 1.2 -1.1 2.6 -1.1 2.2 0 2.4 0.3 1.8 2.3 -0.3 1.2 -1.1 2.4 -1.5 2.5 -0.5 0.2 -0.9 1.2 -0.9 2.3 0 1 -0.4 1.9 -1 1.9 -0.5 0 -1 0.8 -1 1.8 0 1 -0.9 2.4 -2 3.2 -1.1 0.8 -2 2 -2 2.7 0 0.7 -0.7 1.3 -1.5 1.3 -0.8 0 -1.5 0.5 -1.5 1 0 0.6 -0.9 1 -2 1 -1.1 0 -2 0.5 -2 1 0 0.6 -1.3 1 -3 1 -1.6 0 -3 0.5 -3 1 0 0.6 -3.3 1 -8 1 -4.7 0 -8 -0.4 -8 -1z"/>
  <path d="M246 364.5 c0 -0.8 0.5 -1.5 1 -1.5 0.6 0 1 0.7 1 1.5 0 0.8 -0.4 1.5 -1 1.5 -0.5 0 -1 -0.7 -1 -1.5z"/>
  <path d="M289.3 357.3 c-0.7 -0.2 -1.3 -1.3 -1.3 -2.3 0 -1.3 -1 -2 -3.8 -2.5 -2.1 -0.3 -4.5 -1.5 -5.2 -2.6 -0.8 -1 -2.2 -1.9 -3.2 -1.9 -1 0 -1.8 -0.4 -1.8 -0.9 0 -1.6 -5.6 -2.3 -9.4 -1.2 -3.6 0.9 -6.6 3.2 -6.6 4.9 0 1.1 -5.7 2.2 -11.7 2.2 l-4.3 0 0 -4 c0 -2.2 0.5 -4 1 -4 0.6 0 1 -1.6 1 -3.5 0 -2.8 0.4 -3.5 2 -3.5 1.1 0 2 -0.4 2 -1 0 -0.6 3.2 -1 7.5 -1 4.3 0 7.5 0.4 7.5 1 0 0.6 4.5 1 11.6 1 8.7 0 11.9 0.4 13 1.4 0.8 0.8 1.7 4.2 2.1 7.5 0.3 3.4 1 6.1 1.4 6.1 0.5 0 0.9 1.1 0.9 2.5 0 2.5 -0.4 2.8 -2.7 1.8z"/>
  <path d="M307.1 350.8 c0 -2.1 -0.5 -3.8 -1.1 -3.8 -0.5 0 -1 -1.4 -1 -3.1 0 -2 -0.8 -3.9 -2.2 -5 -1.1 -1.1 -1.8 -2.2 -1.3 -2.7 0.4 -0.4 1 -0.1 1.2 0.6 0.3 0.6 1.3 1.2 2.4 1.2 1 0 1.9 0.4 1.9 1 0 0.5 1.1 2 2.5 3.4 2.6 2.6 3.2 4.6 1.5 4.6 -0.5 0 -1 0.9 -1 2 0 1.1 -0.4 2 -0.9 2 -0.5 0 -1.2 0.8 -1.4 1.8 -0.3 0.9 -0.5 0 -0.6 -2z"/>
  <path d="M266 324 c0 -0.5 1.1 -1 2.5 -1 1.4 0 2.5 0.5 2.5 1 0 0.6 -1.1 1 -2.5 1 -1.4 0 -2.5 -0.4 -2.5 -1z"/>
 </g>
 <g fill="#ffdeb6">
  <path d="M259 377.3 c-2.8 -0.5 -5 -2.1 -5 -3.4 0 -0.5 4.5 -0.9 10 -0.9 6 0 10 -0.4 10 -1 0 -0.5 1.6 -1 3.5 -1 1.9 0 3.5 -0.4 3.5 -1 0 -0.5 0.9 -1 1.9 -1 1.1 0 2.1 -0.6 2.4 -1.2 0.2 -0.8 0.8 -0.9 1.3 -0.4 0.5 0.5 0.4 1.1 -0.3 1.3 -0.7 0.3 -1.3 1.1 -1.3 1.9 0 0.8 -1.2 2.7 -2.7 4.2 -2.5 2.5 -3.4 2.7 -11.8 2.9 -4.9 0 -10.1 -0.1 -11.5 -0.4z"/>
  <path d="M252 367 c0 -0.5 -1.3 -1 -3 -1 -2 0 -3 -0.5 -3 -1.5 0 -1.2 1.5 -1.5 7.3 -1.5 8.2 0 9.1 -0.4 10.1 -4.2 0.8 -3.5 5.1 -4 6.1 -0.8 0.3 1.1 1.5 2 2.6 2 1 0 1.9 0.5 1.9 1 0 0.6 2 1 4.5 1 2.5 0 4.5 0.5 4.5 1 0 0.6 -0.7 1 -1.5 1 -0.8 0 -1.5 0.5 -1.5 1 0 0.6 -1.3 1 -3 1 -1.6 0 -3 0.5 -3 1 0 0.6 -4.3 1 -11 1 -6.7 0 -11 -0.4 -11 -1z"/>
  <path d="M272 356.9 c0 -3 -3 -3.9 -12.4 -3.9 -8.9 0 -9.6 -0.1 -9.6 -2 0 -1.5 0.7 -2 2.5 -2 1.4 0 2.5 -0.5 2.5 -1.1 0 -2.2 4.2 -4.8 8.7 -5.5 5.3 -0.8 12.6 0.1 13.1 1.5 0.2 0.6 1.1 1.1 2.1 1.1 0.9 0 2.3 0.9 3.1 2 0.8 1.1 2.2 2 3.2 2 1.1 0 1.8 0.7 1.8 2 0 1.8 -0.7 2 -7.5 2 -4.3 0 -7.5 0.4 -7.5 1 0 0.6 0.5 1 1.1 1 0.5 0 0.8 0.4 0.4 0.9 -0.3 0.5 0.3 1.2 1.2 1.4 1.4 0.4 1.3 0.5 -0.4 0.6 -1.3 0 -2.3 -0.4 -2.3 -1z"/>
  <path d="M288 355 c0 -1.1 0.5 -2 1 -2 0.6 0 1 0.9 1 2 0 1.1 -0.4 2 -1 2 -0.5 0 -1 -0.9 -1 -2z"/>
  <path d="M225.2 352 c0 -1.9 0.2 -2.7 0.5 -1.7 0.2 0.9 0.2 2.5 0 3.5 -0.3 0.9 -0.5 0.1 -0.5 -1.8z"/>
 </g>
 <g fill="#ffffff">
  <path d="M242 359.1 c0 -0.5 0.6 -1.2 1.3 -1.4 0.9 -0.4 0.8 -0.8 -0.3 -1.6 -0.8 -0.5 -1.1 -1.3 -0.8 -1.7 0.4 -0.3 1.9 0.6 3.3 2.1 1.5 1.4 2.4 2.9 2.1 3.3 -0.4 0.3 -1.2 0 -1.7 -0.8 -0.8 -1.1 -1.2 -1.2 -1.6 -0.2 -0.5 1.4 -2.3 1.6 -2.3 0.3z"/>
  <path d="M272 356.6 c0 -0.8 -0.6 -1.6 -1.2 -1.9 -0.7 -0.2 -1 -0.8 -0.6 -1.2 0.4 -0.4 1.4 0 2.3 0.9 0.9 0.9 2.1 1.6 2.6 1.6 0.5 0 0.9 0.5 0.9 1 0 0.6 -0.9 1 -2 1 -1.1 0 -2 -0.6 -2 -1.4z"/>
  <path d="M237.3 339.3 c-1.2 -1.5 -2 -2.9 -1.8 -3.1 0.4 -0.5 5.5 4.4 5.5 5.3 0 1.3 -1.7 0.3 -3.7 -2.2z"/>
 </g>
</svg>`;
        }

        getFemalePupLogo() {
          return `
            <svg xmlns="http://www.w3.org/2000/svg" width="512px" height="512px" viewBox="0 0 512 512">
              <g fill="#000101">
  <path d="M232.3 385.3 c-1.3 -0.2 -2.3 -0.9 -2.3 -1.4 0 -0.5 -0.9 -0.9 -2 -0.9 -1.6 0 -2 -0.7 -2 -3.5 0 -1.9 -0.4 -3.5 -1 -3.5 -0.5 0 -1 -0.7 -1 -1.5 0 -0.8 -0.4 -1.5 -1 -1.5 -0.5 0 -1 -1.8 -1 -4 0 -3 0.5 -4.2 1.8 -4.7 0.9 -0.4 1.9 -1 2.2 -1.4 0.3 -0.4 11.6 -0.8 25.3 -1.1 l24.7 -0.3 0 3.1 c0 1.7 -0.3 5.2 -0.6 7.8 -0.5 3.6 -1.1 4.6 -2.5 4.6 -1.4 0 -1.9 0.7 -1.9 2.5 0 1.8 -0.5 2.5 -2 2.5 -1.1 0 -2 0.5 -2 1 0 0.6 -1.3 1 -3 1 -1.6 0 -3 0.5 -3 1 0 1 -23.9 1.2 -28.7 0.3z m22.7 -10.3 c0 -0.5 -0.9 -1 -1.9 -1 -1.1 0 -2.2 -0.6 -2.4 -1.2 -0.3 -0.7 -0.6 -0.3 -0.6 1 -0.1 1.7 0.5 2.2 2.4 2.2 1.4 0 2.5 -0.4 2.5 -1z"/>
 </g>
 <g fill="#1c1c1c">
  <path d="M222 377 c0 -0.5 -1.6 -1 -3.5 -1 -1.9 0 -3.5 -0.4 -3.5 -1 0 -0.5 -1.1 -1.2 -2.5 -1.6 -2.3 -0.6 -2.5 -1.1 -2.5 -5.9 0 -3 0.4 -6.4 0.9 -7.7 1.3 -3.3 4.6 -6.8 6.5 -6.8 0.9 0 1.6 -0.4 1.6 -1 0 -0.5 0.9 -1 2 -1 1.3 0 2 -0.7 2 -2 0 -1.3 0.9 -2.2 2.8 -2.6 1.5 -0.4 3.4 -1.6 4.3 -2.6 1.1 -1.1 3.7 -2.1 6.8 -2.5 2.8 -0.3 5.1 -1 5.1 -1.4 0 -0.5 1.8 -0.9 4 -0.9 2.2 0 4 -0.4 4 -1 0 -0.5 1.1 -1 2.5 -1 1.4 0 2.5 0.5 2.5 1 0 0.6 1.4 1 3 1 1.7 0 3 0.5 3 1 0 0.6 1.1 1 2.5 1 1.4 0 2.5 0.4 2.5 0.9 0 0.5 1.7 1.1 3.8 1.4 2.1 0.4 4.4 1.5 5.2 2.7 0.9 1.3 2.6 2 4.6 2 1.8 0 3.9 0.7 4.8 1.5 0.8 0.8 2.2 1.5 3 1.5 1 0 1.6 0.9 1.6 2.5 0 1.4 0.5 2.5 1 2.5 0.6 0 1 1.6 1 3.5 0 1.9 -0.4 3.5 -0.9 3.5 -0.5 0 -1.2 1.1 -1.5 2.4 -0.9 3.5 -3.3 5.6 -6.6 5.6 -1.6 0 -3 0.7 -3.4 1.5 -0.3 0.9 -1.8 1.5 -3.7 1.5 l-3.2 0 0.7 -4.9 c0.6 -4.6 0.5 -4.9 -1.4 -4.4 -1.5 0.4 -2 0 -2 -1.3 0 -1.1 -0.5 -3.6 -1.1 -5.6 l-1 -3.8 -11.4 0 c-7 0 -11.5 -0.4 -11.5 -1 0 -0.5 -1.6 -1 -3.5 -1 -1.9 0 -3.5 0.5 -3.5 1 0 0.6 -0.9 1 -2 1 -1.6 0 -2 0.7 -2 3 0 1.7 -0.5 3 -1 3 -0.6 0 -0.8 1.1 -0.4 2.5 0.5 2 0.2 2.5 -1.2 2.5 -1.6 0 -1.5 0.2 0.4 2 2.9 2.7 2.8 3.5 -0.4 3.6 -1.8 0.2 -2.4 -0.2 -2 -1.2 0.7 -1.8 -1.3 -2.9 -2.7 -1.5 -0.9 0.9 -0.9 1.4 -0.1 1.9 2.1 1.3 2.6 5.1 1 6.7 -1.7 1.7 -4.6 2 -4.6 0.5z"/>
 </g>
 <g fill="#7f5a2d">
  <path d="M244 393 c0 -0.5 -1.1 -1 -2.5 -1 -1.4 0 -2.5 -0.4 -2.5 -1 0 -0.5 -0.9 -1 -2 -1 -1.1 0 -2 -0.4 -2 -1 0 -0.5 -0.7 -1 -1.5 -1 -0.8 0 -1.5 -0.4 -1.5 -0.9 0 -0.5 -1.1 -1.2 -2.5 -1.5 -3.2 -0.8 -7.5 -5.2 -7.5 -7.6 0 -1.6 -0.7 -2 -3.1 -2 -1.7 0 -3.7 -0.7 -4.5 -1.5 -0.9 -0.8 -2.4 -1.5 -3.5 -1.5 -1.7 0 -1.9 -0.7 -1.9 -6 0 -3.3 0.4 -6 1 -6 0.6 0 1 -0.6 1 -1.2 0 -1.8 4.9 -7.3 5.7 -6.5 0.3 0.4 -0.4 1.5 -1.5 2.6 -1.8 1.5 -2.2 2.9 -2.2 8 0 5.2 0.4 6.6 2.5 8.6 1.3 1.4 3.4 2.5 4.5 2.5 2.3 0 5 -2.1 5 -3.9 0 -0.6 0.5 -1.1 1 -1.1 0.6 0 1 0.6 1 1.4 0 0.8 1.5 1.7 3.5 2 4.1 0.8 4.9 3.6 1 3.6 -1.6 0 -2.5 0.6 -2.5 1.5 0 0.8 0.9 1.5 1.9 1.5 1.1 0 2.1 0.4 2.3 0.9 0.4 1.3 19.6 4.4 23.4 3.8 1.9 -0.3 4.6 -1.7 6.1 -3.1 1.5 -1.4 3.4 -2.6 4.2 -2.6 0.9 0 1.2 -0.8 0.9 -2.5 -0.4 -2.1 -0.1 -2.5 1.8 -2.5 2 0 2.4 -0.5 2.4 -3 0 -1.6 0.5 -3 1 -3 0.6 0 1 0.7 1 1.5 0 0.9 1 1.5 2.6 1.5 2.2 0 2.4 0.3 1.8 2.3 -0.4 1.2 -1 2.4 -1.4 2.7 -0.4 0.3 -1.1 2 -1.5 3.8 -0.4 1.8 -1.5 3.8 -2.6 4.5 -1 0.6 -1.9 1.7 -1.9 2.4 0 0.7 -0.7 1.3 -1.5 1.3 -0.8 0 -1.5 0.5 -1.5 1 0 0.6 -0.9 1 -2 1 -1.1 0 -2 0.5 -2 1 0 0.6 -1.1 1 -2.5 1 -1.4 0 -2.5 0.5 -2.5 1 0 0.6 -3.2 1 -7.5 1 -4.3 0 -7.5 -0.4 -7.5 -1z"/>
  <path d="M283 370 c0 -0.5 0.6 -1 1.4 -1 0.8 0 1.6 -0.6 1.9 -1.2 0.2 -0.7 0.7 -1 1.1 -0.7 0.8 0.7 -2.1 3.9 -3.5 3.9 -0.5 0 -0.9 -0.4 -0.9 -1z"/>
  <path d="M228 367 c0 -1.3 1.1 -1.3 3 0 1.2 0.8 1.1 1 -0.7 1 -1.3 0 -2.3 -0.4 -2.3 -1z"/>
  <path d="M288.1 362.8 c0 -2.1 -0.5 -3.8 -1.1 -3.8 -0.5 0 -1 -1.3 -1 -2.9 0 -1.6 -0.7 -3.7 -1.6 -4.6 -0.9 -0.9 -1.3 -1.9 -0.9 -2.3 0.4 -0.4 1 -0.1 1.2 0.6 0.3 0.6 1.3 1.2 2.4 1.2 1 0 1.9 0.6 1.9 1.3 0 0.7 0.9 1.9 2 2.7 2.1 1.5 2.8 5 1 5 -0.5 0 -1 0.7 -1 1.5 0 0.8 -0.4 1.5 -0.9 1.5 -0.5 0 -1.2 0.8 -1.4 1.8 -0.3 0.9 -0.5 0 -0.6 -2z"/>
  <path d="M228 361 c0 -2.2 0.5 -4 1 -4 0.6 0 1 -1.3 1 -3 0 -2.3 0.4 -3 2 -3 1.1 0 2 -0.4 2 -1 0 -0.6 2.8 -1 6.5 -1 3.7 0 6.5 0.4 6.5 1 0 0.6 4.5 1 11.5 1 l11.4 0 1 3.8 c0.6 2 1.1 5.2 1.1 7.1 l0 3.4 -4.2 -0.7 c-2.3 -0.4 -4.8 -1.4 -5.7 -2.4 -2.8 -2.9 -5.9 -4.2 -10.4 -4.2 -4.3 0 -8.7 2.4 -8.7 4.7 0 1.2 -5.6 2.3 -11.2 2.3 -3.8 0 -3.8 0 -3.8 -4z"/>
  <path d="M250 338 c0 -0.5 1.1 -1 2.5 -1 1.4 0 2.5 0.5 2.5 1 0 0.6 -1.1 1 -2.5 1 -1.4 0 -2.5 -0.4 -2.5 -1z"/>
 </g>
 <g fill="#ffdeb6">
  <path d="M244 387.3 c-2.8 -0.5 -5 -2.1 -5 -3.4 0 -0.5 4.3 -0.9 9.5 -0.9 5.7 0 9.5 -0.4 9.5 -1 0 -0.5 1.4 -1 3 -1 1.7 0 3 -0.4 3 -1 0 -0.5 0.9 -1 2 -1 1.3 0 2 -0.7 2 -2 0 -1.3 -0.7 -2 -2 -2 -1.1 0 -2 0.5 -2 1 0 0.6 -1.3 1 -3 1 -1.6 0 -3 0.5 -3 1 0 0.6 -4.2 1 -10.5 1 -6.3 0 -10.5 -0.4 -10.5 -1 0 -0.5 -1.3 -1 -3 -1 -2 0 -3 -0.5 -3 -1.5 0 -1.2 1.4 -1.5 6.8 -1.5 7.7 0 8.6 -0.5 9.6 -4.2 0.8 -3.5 5.1 -4 6.1 -0.8 0.3 1.1 1.5 2 2.6 2 1 0 1.9 0.7 1.9 1.5 0 1.2 1.3 1.5 6 1.5 l6 0 0 3 c0 1.7 -0.4 3 -1 3 -0.5 0 -1 0.5 -1 1 0 0.6 -1.2 2.3 -2.7 3.8 -2.5 2.5 -3.4 2.7 -10.8 2.9 -4.4 0 -9.1 -0.1 -10.5 -0.4z"/>
  <path d="M212.2 364 c0 -1.9 0.2 -2.7 0.5 -1.7 0.2 0.9 0.2 2.5 0 3.5 -0.3 0.9 -0.5 0.1 -0.5 -1.8z"/>
  <path d="M235 363 c0 -1.5 0.7 -2 2.5 -2 1.4 0 2.5 -0.5 2.5 -1.1 0 -0.7 1 -2 2.2 -3 1.6 -1.5 3.7 -1.9 9.5 -1.9 7.3 0 10.3 1 13.4 4.3 0.9 0.9 2.4 1.7 3.3 1.7 0.9 0 1.6 0.8 1.6 2 0 1.9 -0.7 2 -17.5 2 -16.8 0 -17.5 -0.1 -17.5 -2z"/>
 </g>
 <g fill="#f7f7f7">
  <path d="M228 369.9 c0 -0.4 0.6 -1 1.3 -1.2 1 -0.4 1 -0.6 0 -0.6 -1.4 -0.1 -1.8 -2.1 -0.5 -2.1 1 0 5.2 3.4 5.2 4.2 0 0.3 -1.3 0.5 -3 0.5 -1.6 0 -3 -0.4 -3 -0.8z"/>
  <path d="M256 368.6 c0 -0.8 -0.6 -1.7 -1.2 -1.9 -0.8 -0.4 -0.7 -0.6 0.4 -0.6 2.6 -0.1 4.8 1 4.8 2.5 0 0.8 -0.9 1.4 -2 1.4 -1.1 0 -2 -0.6 -2 -1.4z"/>
  <path d="M215.3 363 c0 -2.5 0.2 -3.5 0.4 -2.2 0.2 1.2 0.2 3.2 0 4.5 -0.2 1.2 -0.4 0.2 -0.4 -2.3z"/>
  <path d="M224.1 353.4 c-1.8 -2.1 -0.6 -3 1.4 -1.1 0.8 0.9 1.5 1.8 1.5 2.1 0 1.1 -1.5 0.5 -2.9 -1z"/>
 </g>
</svg>`;
        }
      }

      class DMTDesign {
  constructor(rawBlockData) {
    const parser = new BlockDataParser(rawBlockData);
    this.blockData = parser.parse();

    if (!this.blockData || typeof this.blockData !== 'object') {
      throw new Error('Invalid block data');
    }

    const traitManager = new TraitManager(this.blockData);
    this.traits = traitManager.determineTraits();

    if (!this.traits || typeof this.traits !== 'object') {
      throw new Error('Failed to determine traits');
    }

    this.svgBuilder = new SVGBuilder(this.traits, this.blockData);
  }

      async function fetchBlockData(blockNumber) {
  try {
    const response = await fetch(`https://blockchain.info/rawblock/${blockNumber}?format=json`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    console.log("Received block data:", data); // Add this line
    return data;
  } catch (error) {
    console.error('Error fetching block data:', error);
    throw new Error(`Failed to fetch data for block ${blockNumber}: ${error.message}`);
  }
}

      async function generateDMT() {
  const blockNumber = document.getElementById('blockNumber').value.trim();
  if (!blockNumber) {
    alert('Please enter a block number');
    return;
  }
  try {
    document.getElementById('output').innerHTML = 'Generating DMT...';

    const rawBlockData = await fetchBlockData(blockNumber);
    if (!rawBlockData || typeof rawBlockData !== 'object') {
      throw new Error('Invalid block data received');
    }
    const dmtDesign = new DMTDesign(rawBlockData);
    const svgOutput = dmtDesign.generateSVG();

    document.getElementById('output').innerHTML = svgOutput;
  } catch (error) {
    console.error('Error generating DMT:', error);
    document.getElementById('output').innerHTML = `Error generating DMT: ${error.message}`;
  }
}

      document.addEventListener('DOMContentLoaded', () => {
        document.getElementById('generateButton').addEventListener('click', generateDMT);
      });
    </script>
  </body>
</html>