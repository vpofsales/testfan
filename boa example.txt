<div id="b0asviewer" width="256" height="256"></div>
<input id="blk" type="number" style="display:none" />
<input id="insc" type="text" style="display:none" />


<script id="preview" mint="MINT_INSCRIPTION_ID">
  const root = document.getElementById('b0asviewer')
  root.parentElement.style.width = '100%'
  root.parentElement.style.height = '100%'
  root.parentElement.style.padding = '0px'
  root.parentElement.style.margin = '0px'

  const orgWidth = 212
  const orgHeight = 212
  let scaleW = 1
  let scaleH = 1
  let blockNumber = ''
  let inscInput = '';

  const colorMap = {
    '0': '#01BFEA',
    '1': '#6F15FF',
    '2': '#A614CE',
    '3': '#DFEC1C',
    '4': '#1042E8',
    '5': '#008C99',
    '6': '#A2A2A2',
    '7': '#05E96E',
    '8': '#F742F7',
    '9': '#FF6920',
  }


  window.addEventListener('resize', resize, true)
  resize()

  let mintText = document.getElementById('preview').getAttribute('mint')

  if (mintText.includes('MINT_INSCRIPTION_ID')) {

    let blkInput = document.getElementById('blk');
    blkInput.style.display = 'block';
    blkInput.style.position = 'absolute';
    blkInput.style.fontSize = '5px';
    blkInput.style.margin = '5px';
    blkInput.style.left = '5px';
    blkInput.style.top = '5px';
    blkInput.value = blockNumber;

    blkInput.addEventListener('input', (event) => {
      blockNumber = blkInput.value;
      update();
    });


    let insInput = document.getElementById('insc');
    insInput.style.display = 'block';
    insInput.style.position = 'absolute';
    insInput.style.fontSize = '5px';
    insInput.style.margin = '5px';
    insInput.style.left = '5px';
    insInput.style.top = '20px';
    insInput.placeholder = 'i0';

    insInput.addEventListener('input', (event) => {
      inscInput = insInput.value
      update();
    });

    update();
  } else {
    const request = new XMLHttpRequest()
    try {
      request.open('GET', '/content/' + mintText)
      request.responseType = 'text'
      request.addEventListener('load', () => initialize(request.response))
      request.addEventListener('error', () => console.error('XHR error'))
      request.send()
    } catch (error) {
      console.error(`XHR error ${request.status}`)
    }
  }

  function initialize(result) {
    if (result) {
      console.log('Result', result)
      data = JSON.parse(result)
      blockNumber = data.blk;
      inscInput = mintText
    }
    update()
  }

  function resize(event) {
    root.width = window.innerWidth
    root.height = window.innerHeight
    scaleW = root.width / orgWidth
    scaleH = root.height / orgHeight
    offsetX = 0
    offsetY = 0
    if (scaleH < scaleW) {
      scaleW = scaleH
      offsetX = (root.width - orgWidth * scaleW) / 2
    } else {
      scaleH = scaleW
      offsetY = (root.height - orgHeight * scaleH) / 2
    }
    root.style.zoom = scaleW / 2
    update('resize')
  }

  function getInscColor(insc, digitIndex) {

    const defaultColorMap = {
      '0': '#01BFEA',
      '1': '#6F15FF',
      '2': '#A614CE',
      '3': '#DFEC1C',
      '4': '#0C42F2',
      '5': '#008C99',
      '6': '#A2A2A2',
      '7': '#05E96E',
      '8': '#F742F7',
      '9': '#FF6920',
      'a': '#00C7F4',
      'b': '#DFEC1C',
      'c': '#1042E8',
      'd': '#05E96E',
      'e': '#F742F7',
      'f': '#FF6920'
    };
    const char = insc.charAt(digitIndex).toLowerCase() || '6';
    return defaultColorMap[char] || '#FF0004';
  }

  function getInscColor2(insc, digitIndex) {
    const defaultColorMap = {
      '0': '#04ABE8',
      '1': '#5C00F0',
      '2': '#9218CB',
      '3': '#CDD924',
      '4': '#143BC8',
      '5': '#00738D',
      '6': '#8F8F8F',
      '7': '#09CE76',
      '8': '#D737E5',
      '9': '#EA572A',
      'a': '#05AEEC',
      'b': '#CDD924',
      'c': '#143BC8',
      'd': '#09D378',
      'e': '#D737E5',
      'f': '#EA572A'
    };

    const char = insc.charAt(digitIndex).toLowerCase() || '6'; // Default to '0' if not found
    return defaultColorMap[char] || '#FF0004'; // Default red color
  }

  function displayUp(blockNumber, insc) {
    const originalString = blockNumber.toString();
    const digits = originalString.padStart(7, '0').split('').reverse().map(Number);
    const blockColor0 = colorMap[digits[0]] || '#FFFFFF';
    const blockColor1 = colorMap[digits[1]] || '#FFFFFF';
    const blockColor2 = colorMap[digits[2]] || '#FFFFFF';
    const blockColor3 = colorMap[digits[3]] || '#FFFFFF';
    const blockColor4 = colorMap[digits[4]] || '#FFFFFF';
    const blockColor5 = colorMap[digits[5]] || '#FFFFFF';
    const blockColor6 = colorMap[digits[6]] || '#FFFFFF';

    const firstDigit = insc.charAt(0).toLowerCase();
    const secondDigit = insc.charAt(1).toLowerCase();

    const colorMapConditions = {
      '0': ['0', 'a'],
      '1': ['1'],
      '2': ['2'],
      '3': ['3', 'b'],
      '4': ['4', 'c'],
      '5': ['5'],
      '6': ['6'],
      '7': ['7', 'd'],
      '8': ['8', 'e'],
      '9': ['9', 'f'],
      'a': ['0', 'a'],
      'b': ['3', 'b'],
      'c': ['4', 'c'],
      'd': ['7', 'd'],
      'e': ['8', 'e'],
      'f': ['9', 'f']
    };

    const getInscColor1 = colorMapConditions[firstDigit]?.includes(secondDigit) ?
      getInscColor2(insc, 1) :
      getInscColor(insc, 1);

    return `
        <div style="position: absolute; left: 92.5px; top: 95px;">
         <svg width="240" height="256" viewBox="0 0 240 256" fill="none" xmlns="http://www.w3.org/2000/svg">
                <!-- B Colors -->
        <rect x="175.8" y="224" width="56.2" height="32" fill="${blockColor0}"/>
        <rect x="159.8" y="224" width="16.2" height="32" fill="${blockColor1}"/>
        <rect x="143.8" y="224" width="16.2" height="32" fill="${blockColor2}"/>
        <rect x="127.8" y="224" width="16.2" height="32" fill="${blockColor3}"/>
        <rect x="111.8" y="224" width="16.2" height="32" fill="${blockColor4}"/>
        <rect x="95.8" y="224" width="16.2" height="32" fill="${blockColor5}"/>
        <rect x="79.8" y="224" width="16.2" height="32" fill="${blockColor6}"/>
        <rect x="63.8" y="224" width="16.2" height="32" fill="${getInscColor(insc, 31)}"/>
        <rect x="47.8" y="224" width="16.2" height="32" fill="${getInscColor(insc, 30)}"/>
        <rect x="32" y="239.8" width="16" height="16.2" fill="${getInscColor2(insc, 30)}"/>
        <rect x="16" y="223.8" width="16.2" height="16.2" fill="${getInscColor2(insc, 29)}"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M32 208H31.5V224H32V240H48V208H32.5H32Z" fill="${getInscColor(insc, 29)}"/>
        <rect y="207.8" width="16.2" height="16.2" fill="${getInscColor2(insc, 28)}"/>
        <rect x="16" y="207.8" width="16" height="16.2" fill="${getInscColor(insc, 28)}"/>
        <rect y="191.8" width="16.2" height="16.2" fill="${getInscColor2(insc, 27)}"/>
        <rect x="16" y="191.8" width="16" height="16.2" fill="${getInscColor(insc, 27)}"/>
        <rect y="175.8" width="16.2" height="16.2" fill="${getInscColor2(insc, 26)}"/>
        <rect x="16" y="175.8" width="16" height="16.2" fill="${getInscColor(insc, 26)}"/>
        <path d="M16.2 143.8H0V176H16.2V143.8Z" fill="${getInscColor2(insc, 25)}"/>
        <rect x="16" y="159.8" width="16" height="16.2" fill="${getInscColor(insc, 25)}"/>
        <path d="M32.2 128H16V160H32.2V128Z" fill="${getInscColor2(insc, 24)}"/>
        <rect x="32" y="143.8" width="16" height="16.2" fill="${getInscColor(insc, 24)}"/>
        <rect x="32" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 23)}"/>
        <rect x="48" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 22)}"/>
        <rect x="64" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 21)}"/>
        <rect x="80" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 20)}"/>
        <rect x="96" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 19)}"/>
        <rect x="112" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 18)}"/>
        <rect x="128" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 17)}"/>
        <rect x="144" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 16)}"/>
        <rect x="160" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 15)}"/>
        <rect x="176" y="112" width="16.2" height="32" fill="${getInscColor2(insc, 14)}"/>
        <rect x="192" y="127.8" width="16" height="16.2" fill="${getInscColor(insc, 14)}"/>
        <path d="M208.2 96H192V128H208.2L208.2 96Z" fill="${getInscColor2(insc, 13)}"/>
        <rect x="208" y="111.8" width="16" height="16.2" fill="${getInscColor(insc, 13)}"/>
        <path d="M207.8 96V112L224 112V95.8H208V96H207.8Z" fill="${getInscColor2(insc, 12)}"/>
        <rect x="223.8" y="95.8" width="16.2" height="16.2" fill="${getInscColor(insc, 12)}"/>
        <rect x="208" y="79.8" width="16" height="16.2" fill="${getInscColor2(insc, 11)}"/>
        <rect x="223.8" y="79.8" width="16.2" height="16.2" fill="${getInscColor(insc, 11)}"/>
        <rect x="223.8" y="63.8" width="16.2" height="16.2" fill="${getInscColor(insc, 10)}"/>
        <rect x="208" y="63.8" width="16" height="16.2" fill="${getInscColor2(insc, 10)}"/>
        <rect x="223.8" y="32" width="16.2" height="32" fill="${getInscColor(insc, 9)}"/>
        <rect x="208" y="47.8" width="16" height="16.2" fill="${getInscColor2(insc, 9)}"/>
        <rect x="192" y="31.8" width="16.2" height="16.2" fill="${getInscColor2(insc, 8)}"/>
        <path d="M224 16H207.8V48H224V16Z" fill="${getInscColor(insc, 8)}"/>
        <rect x="191.8" width="16.2" height="32" fill="${getInscColor(insc, 7)}"/>
        <rect x="175.8" width="16.2" height="32" fill="${getInscColor(insc, 6)}"/>
        <rect x="159.8" width="16.2" height="32" fill="${getInscColor(insc, 5)}"/>
        <rect x="143.8" width="16.2" height="32" fill="${getInscColor(insc, 4)}"/>
        <rect x="127.8" width="16.2" height="32" fill="${getInscColor(insc, 3)}"/>
        <rect x="111.8" width="16.2" height="32" fill="${getInscColor(insc, 2)}"/>
        <rect x="79.8" width="32.2" height="32" fill="${getInscColor1}"/>


            </svg>
        </div>
    `;
  }

  function displayDown(blockNumber, insc) {
    const originalString = blockNumber.toString();
    const digits = originalString.padStart(7, '0').split('').reverse().map(Number);
    const blockColor0 = colorMap[digits[0]] || '#FFFFFF';
    const blockColor1 = colorMap[digits[1]] || '#FFFFFF';
    const blockColor2 = colorMap[digits[2]] || '#FFFFFF';
    const blockColor3 = colorMap[digits[3]] || '#FFFFFF';
    const blockColor4 = colorMap[digits[4]] || '#FFFFFF';
    const blockColor5 = colorMap[digits[5]] || '#FFFFFF';
    const blockColor6 = colorMap[digits[6]] || '#FFFFFF';
    const firstDigit = insc.charAt(0).toLowerCase();
    const secondDigit = insc.charAt(1).toLowerCase();
    const colorMapConditions = {
      '0': ['0', 'a'],
      '1': ['1'],
      '2': ['2'],
      '3': ['3', 'b'],
      '4': ['4', 'c'],
      '5': ['5'],
      '6': ['6'],
      '7': ['7', 'd'],
      '8': ['8', 'e'],
      '9': ['9', 'f'],
      'a': ['0', 'a'],
      'b': ['3', 'b'],
      'c': ['4', 'c'],
      'd': ['7', 'd'],
      'e': ['8', 'e'],
      'f': ['9', 'f']
    };
    const getInscColor1 = colorMapConditions[firstDigit]?.includes(secondDigit) ?
      getInscColor2(insc, 1) :
      getInscColor(insc, 1);

    return `
        <div style="position: absolute; left: 92.5px; top: 95px;">
            <svg width="240" height="256" viewBox="0 0 240 256" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="56.2" height="32" transform="matrix(1 0 0 -1 175.8 32)" fill="${blockColor0}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 159.8 32)" fill="${blockColor1}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 143.8 32)" fill="${blockColor2}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 127.8 32)" fill="${blockColor3}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 111.8 32)" fill="${blockColor4}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 95.8 32)" fill="${blockColor5}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 79.8 32)" fill="${blockColor6}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 63.8 32)" fill="${getInscColor(insc, 31)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 47.8 32)" fill="${getInscColor(insc, 30)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 32 16.2)" fill="${getInscColor2(insc, 30)}"/>
            <rect width="16.2" height="16.2" transform="matrix(1 0 0 -1 16 32.2)" fill="${getInscColor2(insc, 29)}"/>
            <path fill-rule="evenodd" clip-rule="evenodd" d="M32 48H31.5V32H32V16H48V48H32.5H32Z" fill="${getInscColor(insc, 29)}"/>
            <rect width="16.2" height="16.2" transform="matrix(1 0 0 -1 0 48.2)" fill="${getInscColor2(insc, 28)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 16 48.2)" fill="${getInscColor(insc, 28)}"/>
            <rect width="16.2" height="16.2" transform="matrix(1 0 0 -1 0 64.2)" fill="${getInscColor2(insc, 27)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 16 64.2)" fill="${getInscColor(insc, 27)}"/>
            <rect width="16.2" height="16.2" transform="matrix(1 0 0 -1 0 80.2)" fill="${getInscColor2(insc, 26)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 16 80.2)" fill="${getInscColor(insc, 26)}"/>
            <path d="M16.2 112.2H0V80H16.2V112.2Z" fill="${getInscColor2(insc, 25)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 16 96.2)" fill="${getInscColor(insc, 25)}"/>
            <path d="M32.2 128H16V96H32.2V128Z" fill="${getInscColor2(insc, 24)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 32 112.2)" fill="${getInscColor(insc, 24)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 32 144)" fill="${getInscColor2(insc, 23)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 48 144)" fill="${getInscColor2(insc, 22)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 64 144)" fill="${getInscColor2(insc, 21)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 80 144)" fill="${getInscColor2(insc, 20)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 96 144)" fill="${getInscColor2(insc, 19)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 112 144)" fill="${getInscColor2(insc, 18)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 128 144)" fill="${getInscColor2(insc, 17)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 144 144)" fill="${getInscColor2(insc, 16)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 160 144)" fill="${getInscColor2(insc, 15)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 176 144)" fill="${getInscColor2(insc, 14)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 192 128.2)" fill="${getInscColor(insc, 14)}"/>
            <path d="M208.2 160H192V128H208.2L208.2 160Z" fill="${getInscColor2(insc, 13)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 208 144.2)" fill="${getInscColor(insc, 13)}"/>
            <path d="M207.8 160V144L224 144V160.2H208V160H207.8Z" fill="${getInscColor2(insc, 12)}"/>
            <rect width="16.2" height="16.2" transform="matrix(1 0 0 -1 223.8 160.2)" fill="${getInscColor(insc, 12)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 208 176.2)" fill="${getInscColor2(insc, 11)}"/>
            <rect width="16.2" height="16.2" transform="matrix(1 0 0 -1 223.8 176.2)" fill="${getInscColor(insc, 11)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 208 192.2)" fill="${getInscColor2(insc, 10)}"/>
            <rect width="16.2" height="16.2" transform="matrix(1 0 0 -1 223.8 192.2)" fill="${getInscColor(insc, 10)}"/>
            <rect width="16" height="16.2" transform="matrix(1 0 0 -1 208 208.2)" fill="${getInscColor2(insc, 9)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 223.8 224)" fill="${getInscColor(insc, 9)}"/>
            <rect width="16.2" height="16.2" transform="matrix(1 0 0 -1 192 224.2)" fill="${getInscColor2(insc, 8)}"/>
            <path d="M224 240H207.8V208H224V240Z" fill="${getInscColor(insc, 8)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 191.8 256)" fill="${getInscColor(insc, 7)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 175.8 256)" fill="${getInscColor(insc, 6)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 159.8 256)" fill="${getInscColor(insc, 5)}""/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 143.8 256)" fill="${getInscColor(insc, 4)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 127.8 256)" fill="${getInscColor(insc, 3)}"/>
            <rect width="16.2" height="32" transform="matrix(1 0 0 -1 111.8 256)" fill="${getInscColor(insc, 2)}"/>
            <path d="M76.0001 256H112V224H76.0001V256Z" fill="${getInscColor1}"/>
            </svg>
        </div>
    `;
  }

  function applyOffsets(inscInput) {
    // Define the default offset values
    let offsetX = 0;
    let offsetY = 0;
    let offsetYMax = null;
    const dripsCondition = inscInput.includes('ddd') && cB0A(inscInput);
    const pearlsCondition = inscInput.includes('eee') && cB0A(inscInput);
    if (dripsCondition && pearlsCondition) {
      offsetYMax = -12;
    } else if (pearlsCondition) {
      offsetYMax = -6;
    } else if (dripsCondition) {
      offsetYMax = -12;
    }
    if (offsetYMax !== null) {
      offsetY += offsetYMax;
    }

    return {
      offsetX,
      offsetY
    };
  }

  function displayHead(blockNumber, insc) {
    let headColor = getInscColor(insc, 0);
    const tongueColor = cAA(insc) ? '#F742F7' : 'transparent';
    let piercingColor = 'transparent';
    if (cAAA(insc)) {
      if (cAAAA(insc) && c42024(insc)) {
        piercingColor = '#05E6FA';
      } else {
        piercingColor = cAAAA(insc) ? '#07FBFB' : '#E9F810';
      }
    }
    const firstChar = insc.charAt(0).toLowerCase();
    const redColor = ['1', '4', '5', '8', 'c', 'e'].includes(firstChar) ? '#da0445' : '#F40A50';
    const headYPosition = cB0A(insc) ? '311px' : '90.27px';
    let headXPosition = 76.5;
    if (cAA(insc) || c420(insc)) {
      headXPosition += 8;
    }
    return `
        <div style="position: absolute; left: ${headXPosition}px; top: ${headYPosition};">
            <svg width="97" height="44" viewBox="0 0 97 44" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M24.5049 27.72H68.7489V43.92H24.5049V27.72Z" fill="${redColor}"/>
                <path d="M38.1482 43.9199H38.1455L38.1455 26.3626L52.5455 26.3625V29.5226L38.1482 43.9199Z" fill="white"/>
                <rect x="52.5459" y="7.948" width="14.4" height="14.4" fill="#00D0FF"/>
                <path d="M96.501 0.719971H24.501V29.6149H66.8467V43.92H96.501V0.719971Z" fill="${headColor}"/>
                <path d="M66.9459 7.91992V22.3199H52.5459L52.5459 7.91992L66.9459 7.91992Z" fill="${redColor}"/>
                <path d="M0.5 37.9199V43.9199H38.1455V37.9199H0.5Z" fill="${tongueColor}"/>
                <rect x="0.5" y="24" width="14" height="14" fill="${piercingColor}"/> <!-- Adjusted position -->
            </svg>
        </div>
    `;
  }

  function displaycig(insc) {
    let posX = 62.6;
    let posY = 76.2;
    if (cB0A(insc)) {
      posY += 220.8;
    }
    if (cAA(insc) || c420(insc)) {
      posX += 8;
    }
    let lightColor;
    let darkColor;
    let lightColorLowOpacity = 'white';
    if (c420420(insc)) {
      lightColor = '#A2FF00';
      darkColor = '#00BE57';
    } else if (c42024(insc)) {
      lightColor = '#07FBFB';
      darkColor = '#2000FF';
    } else {
      lightColor = 'white';
      darkColor = '#F40A50';
    }

    return `
        <div style="position: absolute; top: ${posY}px; left: ${posX}px;">
            <svg width="39" height="58" viewBox="0 0 39 58" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="14.2997" height="24.0016" transform="matrix(-4.37114e-08 1 1 4.37114e-08 14.5 43.6204)" fill="${lightColor}"/>
                <rect width="14.2997" height="24.0016" transform="matrix(-4.37114e-08 1 1 4.37114e-08 14.5 43.6204)" fill="${lightColor}"/>
                <rect width="14.2997" height="14.2997" transform="matrix(-4.37114e-08 1 1 4.37114e-08 0.201172 43.6204)" fill="${lightColor}"/>
                <rect width="14.2997" height="14.2997" transform="matrix(-4.37114e-08 1 1 4.37114e-08 0.201172 43.6204)" fill="${darkColor}"/>
                <rect width="14.2997" height="14.2997" transform="matrix(-4.37114e-08 1 1 4.37114e-08 0.201172 22.1711)" fill="${lightColorLowOpacity}" fill-opacity="0.3"/>
                <rect width="14.2997" height="14.2997" transform="matrix(-4.37114e-08 1 1 4.37114e-08 0.201172 0.420166)" fill="${lightColorLowOpacity}" fill-opacity="0.3"/>
            </svg>
        </div>
    `;
  }

  function displayBloodDrips(insc) {
    let posX = 114.4;
    let posY = 141.66;
    if (cB0A(insc)) {
      posY += 220.2;
    }

    if (cAA(insc) || c420(insc)) {
      posX += 8;
    }

    const rectColor = cDDDDD(insc) ? '#9FF50A' : '#F40A50';

    return `
        <div style="position: absolute; top: ${posY}px; left: ${posX}px;">
            <svg width="21" height="39" viewBox="0 0 21 39" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect width="15" height="10" transform="matrix(-4.37114e-08 1 1 4.37114e-08 0.648926 0.661606)" fill="#DCDCDC"/>
                <rect width="15" height="10" transform="matrix(-4.37114e-08 1 1 4.37114e-08 0.648926 0.661606)" fill="${rectColor}"/>
                <rect width="15" height="10" transform="matrix(-4.37114e-08 1 1 4.37114e-08 10.6489 23.1616)" fill="#DCDCDC"/>
                <rect width="15" height="10" transform="matrix(-4.37114e-08 1 1 4.37114e-08 10.6489 23.1616)" fill="${rectColor}"/>
            </svg>
        </div>
    `;
  }

  function displaysSpikesChoker(insc) {
    let posX = 172;
    let posY = 85.8;

    if (cB0A(insc)) {
      posY += 224;
    }

    if (cAA(insc) || c420(insc)) {
      posX += 8;
    }

    const secondChar = insc.charAt(1).toLowerCase();
    let fillColor = cCCCC(insc) ? '#07FBFB' : '#E9E9E9';
    let fillColor2;
    if (cCCCC(insc) && (secondChar === '4' || secondChar === 'c')) {
      fillColor2 = '#1A00D4';
    } else if (cCCCC(insc)) {
      fillColor2 = '#2000FF';
    } else {
      fillColor2 = '#3B3947';
    }

    return `
        <div style="position: absolute; top: ${posY}px; left: ${posX}px;">
            <svg width="17" height="42" viewBox="0 0 17 42" fill="none" xmlns="http://www.w3.org/2000/svg">
                <rect x="0.951172" y="8.72949" width="16" height="32.5" fill="${fillColor2}"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M16.9512 0.830684L16.9512 12.833L4.94919 12.833L16.9512 0.830684Z" fill="${fillColor}"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M16.9512 15.0289L16.9512 27.0312L4.94919 27.0312L16.9512 15.0289Z" fill="${fillColor}"/>
                <path fill-rule="evenodd" clip-rule="evenodd" d="M16.9512 29.2272L16.9512 41.2295L4.94919 41.2295L16.9512 29.2272Z" fill="${fillColor}"/>
            </svg>
        </div>
    `;
  }

  function displayTailPiercing(insc) {
    let posX = 268.2;
    let posY = 302.3;

    if (cB0A(insc)) {
      posY -= 176.3;
    }
    let fillColor = c6969(insc) ? '#07FBFB' : '#FFE500';

    return `
        <div style="position: absolute; top: ${posY}px; left: ${posX}px;">
            <svg width="17" height="17" viewBox="0 0 17 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M16.498 0.765627L0.498048 0.765625L0.498047 16.7656H16.498V0.765627Z" fill="white"/>
                <path d="M16.498 0.765627L0.498048 0.765625L0.498047 16.7656H16.498V0.765627Z" fill="${fillColor}"/>
            </svg>
        </div>
    `;
  }

  function displayPearls(insc) {
    let posX = 160.5;
    let posY = 94.6;
    if (cB0A(insc)) {
      posY += 224.2;
    }
    if (cAA(insc) || c420(insc)) {
      posX += 8;
    }

    let fillColor = cEEEE(insc) ? '#07FBFB' : '#FFFFFF';

    const pearlsType = cB0A(insc) ?
      `
             <svg width="48" height="60" viewBox="0 0 48 60" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="12.4512" y="47.7449" width="11.7529" height="11.7529" transform="rotate(-180 12.4512 47.7449)" fill="${fillColor}"/>
            <rect x="24.2051" y="59.5283" width="11.7529" height="11.7529" transform="rotate(-180 24.2051 59.5283)" fill="${fillColor}"/>
            <rect x="35.957" y="47.7983" width="11.7529" height="11.7529" transform="rotate(-180 35.957 47.7983)" fill="${fillColor}"/>
            <rect x="47.7109" y="36.0452" width="11.7529" height="36" transform="rotate(-180 47.7109 36.0452)" fill="${fillColor}"/>
            </svg>

        ` :
      `
            <svg width="48" height="63" viewBox="0 0 48 63" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect x="12.4854" y="51.1912" width="11.7529" height="11.7529" transform="rotate(-180 12.4854 51.1912)" fill="${fillColor}"/>
            <rect x="24.2383" y="62.9749" width="11.7529" height="11.7529" transform="rotate(-180 24.2383 62.9749)" fill="${fillColor}"/>
            <rect x="35.9912" y="51.2449" width="11.7529" height="11.7529" transform="rotate(-180 35.9912 51.2449)" fill="${fillColor}"/>
            <rect x="47.7441" y="39.4917" width="11.7529" height="39.3" transform="rotate(-180 47.7441 39.4917)" fill="${fillColor}"/>
            </svg>

        `;

    return `
        <div style="position: absolute; top: ${posY}px; left: ${posX}px;">
            ${pearlsType}
        </div>
    `;
  }

  function displayBowNeck(insc) {

    let posX = 151.7;
    let posY = 80.5;

    if (cB0A(insc)) {
      posY += 220.4;
    }

    if (cAA(insc) || c420(insc)) {
      posX += 8;
    }
    let fillColor = '#FF6FFF';
    if (cBBBB(insc) && cFFFF(insc)) {
      fillColor = '#05E6FA';
    } else if (cBBBB(insc)) {
      fillColor = '#07FBFB';
    }

    return `
        <div style="position: absolute; top: ${posY}px; left: ${posX}px;">
            <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0.0917969 0.171875L10.6982 10.7783L0.0920977 21.3844L0.0917969 0.171875Z" fill="${fillColor}"/>
                <path d="M21.3056 21.3844L10.6992 10.778L21.3053 0.171875L21.3056 21.3844Z" fill="${fillColor}"/>
            </svg>
        </div>
    `;
  }

  function displayTailBow(insc) {
    let posX = 313.8;
    let posY = 308.4;
    if (cB0A(insc)) {
      posY -= 192.2;
    }
    let fillColor = c8888(insc) ? '#07FBFB' : '#FF6FFF';

    return `
        <div style="position: absolute; top: ${posY}px; left: ${posX}px;">
            <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M0.0917969 0.171875L10.6982 10.7783L0.0920977 21.3844L0.0917969 0.171875Z" fill="${fillColor}"/>
                <path d="M21.3056 21.3844L10.6992 10.778L21.3053 0.171875L21.3056 21.3844Z" fill="${fillColor}"/>
            </svg>
        </div>
    `;
  }

  function displaySunhat(insc) {
    // Default x and y positions
    let posX = 88.7;
    let posY = 78.6;

    // Translate y position by 220.4 if cB0A is true
    if (cB0A(insc)) {
      posY += 220.4;
    }

    // Translate x position by 8 if cAA or c420 is true
    if (cAA(insc) || c420(insc)) {
      posX += 8;
    }

    // Determine the color based on cFFFF
    let fillColor = cFFFF(insc) ? '#07FBFB' : '#FFE898'; // Use #07FBFB if cFFFF is true, otherwise use #FFE898

    // Return the updated SVG for the sunhat with dynamic x, y positions, and dynamic color
    return `
        <div style="position: absolute; top: ${posY}px; left: ${posX}px;">
            <svg width="96" height="13" viewBox="0 0 96 13" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fill-rule="evenodd" clip-rule="evenodd" d="M12.7345 6.53551V0.735352L84.3254 0.735383V6.53554H95.9258V12.8329L0.802734 12.8329L0.802737 6.53551H12.7345Z" fill="${fillColor}"/>
            </svg>
        </div>
    `;
  }

  function cAA(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('aa');
  }

  function cAAA(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('aaa');
  }

  function cAAAA(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('aaaa');
  }

  function cBBB(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('bbb');
  }

  function cBBBB(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('bbbb');
  }

  function cCCC(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('ccc');
  }

  function cCCCC(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('cccc');
  }

  function cDDD(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('ddd');
  }

  function cDDDDD(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('ddddd');
  }

  function cEEE(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('eee');
  }

  function cEEEE(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('eeee');
  }

  function cFFF(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('fff');
  }

  function cFFFF(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('ffff');
  }

  function c888(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('888');
  }

  function c8888(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('8888');
  }

  function c696(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('696');
  }

  function c6969(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('6969');
  }

  function c420(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('420');
  }

  function c42024(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('42024');
  }

  function c420420(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('420420');
  }

  function cB0A(inscInput) {
    const inputStr = inscInput.toLowerCase();
    return inputStr.includes('b0a');
  }

  function generateMetadata(insc, blockNumber) {
    insc = insc ? String(insc) : '';
    blockNumber = blockNumber !== undefined && blockNumber !== null ? blockNumber : 0;

    const colorMapBlock = {
      '0': 'light blue',
      '1': 'indigo',
      '2': 'purple',
      '3': 'yellow',
      '4': 'blue',
      '5': 'teal',
      '6': 'grey',
      '7': 'green',
      '8': 'pink',
      '9': 'orange'
    };

    const colorMapInsc = {
      '0': 'light blue',
      '1': 'indigo',
      '2': 'purple',
      '3': 'yellow',
      '4': 'blue',
      '5': 'teal',
      '6': 'grey',
      '7': 'green',
      '8': 'pink',
      '9': 'orange',
      'a': 'light blue',
      'b': 'yellow',
      'c': 'blue',
      'd': 'green',
      'e': 'pink',
      'f': 'orange'
    };

    const colorCounts = {
      'light blue': 0,
      'indigo': 0,
      'purple': 0,
      'yellow': 0,
      'blue': 0,
      'teal': 0,
      'grey': 0,
      'green': 0,
      'pink': 0,
      'orange': 0
    };

    // Process blockNumber using the same logic as in other functions
    const originalString = blockNumber.toString(); // Convert blockNumber to string
    const digits = originalString.padStart(7, '0').split('').reverse(); // Pad, reverse, and split into digits

    // Count colors for the first 7 characters of blockNumber
    for (let i = 0; i < 7; i++) {
      const char = digits[i]; // Get the digit character
      const color = colorMapBlock[char]; // Get the color from the map
      if (color) {
        colorCounts[color]++; // Increment the count for the color
      }
    }

    // Count colors for the first 32 characters of insc
    for (let i = 0; i < 32 && i < insc.length; i++) {
      const char = insc.charAt(i).toLowerCase();
      const color = colorMapInsc[char];
      if (color) {
        colorCounts[color]++;
      }
    }

    // Find colors with 0 counts
    const hypercommonExclusions = Object.keys(colorCounts).filter(color => colorCounts[color] === 0);

    // Determine traits for Cig, Alien Cig, and Venom Cig
    const cig = c420(insc) && !c42024(insc) && !c420420(insc);
    const alienCig = c42024(insc) && !c420420(insc);
    const venomCig = c420420(insc);

    return {
      colorCounts,
      hypercommonExclusions, // Include the list of colors with 0 counts
      Tongue: cAA(insc),
      "Tongue Piercing": cAAA(insc) && !cAAAA(insc),
      "Alien Tongue Piercing": cAAAA(insc),
      Bow: cBBB(insc) && !cBBBB(insc),
      "Alien Bow": cBBBB(insc),
      "Spikes Choker": cCCC(insc) && !cCCCC(insc),
      "Alien Spikes Choker": cCCCC(insc),
      "Blood Drips": cDDD(insc) && !cDDDDD(insc),
      "Poison Drips": cDDDDD(insc),
      Pearls: cEEE(insc) && !cEEEE(insc),
      "Alien Pearls": cEEEE(insc),
      Sunhat: cFFF(insc) && !cFFFF(insc),
      "Alien Sunhat": cFFFF(insc),
      Cig: cig,
      "Alien Cig": alienCig,
      "Venom Cig": venomCig,
      "Tail Bow": c888(insc) && !c8888(insc),
      "Alien Tail Bow": c8888(insc),
      "Tail Piercing": c696(insc) && !c6969(insc),
      "Alien Tail Piercing": c6969(insc),
      "Slither Down": cB0A(insc)
    };
  }
  const metadata = generateMetadata(insc);
  console.log(metadata);

  function generateHtmlBasedOnBlockNumber(blockNumber, inscInput) {
    inscInput = String(inscInput);

    let svgContent = "";

    if (inscInput && blockNumber) {
      let firstChar = inscInput.charAt(0).toLowerCase();
      const {
        offsetX,
        offsetY
      } = applyOffsets(inscInput, firstChar);
      let cig = c420(inscInput) ? displaycig(inscInput) : "";
      let bowNeck = cBBB(inscInput) ? displayBowNeck(inscInput) : "";
      let spikeChoker = cCCC(inscInput) ? displaysSpikesChoker(inscInput) : "";
      let bloodDrips = cDDD(inscInput) ? displayBloodDrips(inscInput) : "";
      let pearls = cEEE(inscInput) ? displayPearls(inscInput) : "";
      let sunHat = cFFF(inscInput) ? displaySunhat(inscInput) : "";
      let tailPiercing = c696(inscInput) ? displayTailPiercing(inscInput) : "";
      let bowTail = c888(inscInput) ? displayTailBow(inscInput) : "";
      let UpOrDown = cB0A(inscInput) ? displayDown(blockNumber, inscInput) : displayUp(blockNumber, inscInput);
      let Head = displayHead(blockNumber, inscInput);

      const svgWrapper = `
      <div style="position: absolute; left: ${offsetX}px; top: ${offsetY}px;">
        ${cig}
        ${bloodDrips}
        ${UpOrDown}
        ${pearls}
        ${spikeChoker}
        ${Head}
        ${tailPiercing}
        ${sunHat}
        ${bowNeck}
        ${bowTail}
      </div>`;

      svgContent = svgWrapper;
    } else {
      svgContent = `
      <div style="position: absolute; top: 0px; left: 0px;">
        <svg width="425" height="425" viewBox="0 0 425 425" fill="none" xmlns="http://www.w3.org/2000/svg">
          <rect width="425" height="425" fill="#303030"/>
          <rect width="32" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 252.5 319.937)" fill="#717171"/>
          <rect width="32" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 172.5 319.937)" fill="#6B6B6B"/>
          <rect width="32" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 156.5 319.937)" fill="#A5A5A5"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 236.5 351.937)" fill="#787878"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 220.5 351.938)" fill="#BABABA"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 204.5 351.938)" fill="#D5D5D5"/>
          <rect width="31.9999" height="32" transform="matrix(-4.37114e-08 1 1 4.37114e-08 124.5 319.937)" fill="#666666"/>
          <rect width="31.9999" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 140.5 319.937)" fill="#717171"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 252.5 351.938)" fill="#D5D5D5"/>
          <path fill-rule="evenodd" clip-rule="evenodd" d="M300.5 351.938H284.5L268.5 351.938V319.938L268.5 319.938L284.5 319.938L300.5 319.938L308.5 319.938L316.5 319.938L324.5 319.938V351.938H316.5H308.5H300.5Z" fill="#CECECE"/>
          <rect width="32" height="15.9688" transform="matrix(-4.37114e-08 1 1 4.37114e-08 92.5625 239.937)" fill="#727272"/>
          <rect width="16.0002" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 108.531 255.937)" fill="#787878"/>
          <rect width="32" height="15.9688" transform="matrix(-4.37114e-08 1 1 4.37114e-08 108.547 223.937)" fill="#9B9B9B"/>
          <rect width="16.0002" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 124.516 239.937)" fill="#A5A5A5"/>
          <rect width="32" height="32" transform="matrix(-4.37114e-08 1 1 4.37114e-08 108.531 303.938)" fill="#626262"/>
          <rect width="32" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 124.531 303.938)" fill="#7A7A7A"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 140.531 239.937)" fill="#666666"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 156.531 239.937)" fill="#999999"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 172.531 239.937)" fill="#D5D5D5"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 188.531 239.937)" fill="#666666"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 220.531 239.937)" fill="#626262"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 236.531 239.937)" fill="#999999"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 252.531 239.937)" fill="#666666"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 204.531 239.937)" fill="#D5D5D5"/>
          <rect width="31.9999" height="15.969" transform="matrix(-4.37114e-08 1 1 4.37114e-08 252.531 207.938)" fill="#B3B3B3"/>
          <rect width="31.9995" height="32" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 300.5 239.937)" fill="#6B6B6B"/>
          <rect width="31.9995" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 284.5 239.937)" fill="#545454"/>
          <rect width="31.9997" height="32" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 316.35 223.937)" fill="#CECECE"/>
          <rect width="31.9997" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 300.35 223.937)" fill="#B3B3B3"/>
          <rect x="332.5" y="175.937" width="16.0001" height="32" transform="rotate(90 332.5 175.937)" fill="#717171"/>
          <rect x="316.5" y="175.937" width="16.0001" height="16" transform="rotate(90 316.5 175.937)" fill="#666666"/>
          <rect width="16" height="32" transform="matrix(2.62268e-07 -1 -1 -6.55671e-08 332.5 175.937)" fill="#D5D5D5"/>
          <rect width="16" height="16" transform="matrix(2.62268e-07 -1 -1 -6.55671e-08 316.5 175.937)" fill="#D5D5D5"/>
          <rect width="32" height="32" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 332.5 159.937)" fill="#A5A5A5"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 316.5 159.937)" fill="#9B9B9B"/>
          <rect width="32" height="32" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 316.5 143.937)" fill="#585858"/>
          <rect width="32" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 300.5 143.937)" fill="#5B5B5B"/>
          <rect width="32" height="34" transform="matrix(-4.37114e-08 1 1 4.37114e-08 170.199 95.9375)" fill="#717171"/>
          <rect x="220.35" y="95.9375" width="32" height="16.1507" transform="rotate(90 220.35 95.9375)" fill="#A2A2A2"/>
          <rect x="236.199" y="95.9375" width="32" height="15.8496" transform="rotate(90 236.199 95.9375)" fill="#CECECE"/>
          <rect x="252.199" y="95.9375" width="32" height="16" transform="rotate(90 252.199 95.9375)" fill="#A5A5A5"/>
          <rect x="268.35" y="95.9375" width="32" height="16.1504" transform="rotate(90 268.35 95.9375)" fill="#787878"/>
          <rect x="284.35" y="95.9375" width="32" height="16" transform="rotate(90 284.35 95.9375)" fill="#BABABA"/>
          <rect x="300.5" y="95.9375" width="32" height="16.1504" transform="rotate(90 300.5 95.9375)" fill="#A2A2A2"/>
          <path d="M100.501 118.854H143.516V134.604H100.501V118.854Z" fill="#767676"/>
          <path d="M113.766 134.603H113.763L113.763 117.533L127.763 117.533V120.606L113.766 134.603Z" fill="white"/>
          <rect x="127.763" y="99.6309" width="14" height="14" fill="#CECECE"/>
          <path d="M170.498 92.6035H100.498V120.696H141.667V134.604H170.498V92.6035Z" fill="#CECECE"/>
          <path d="M141.763 99.6035V113.604H127.763L127.763 99.6035L141.763 99.6035Z" fill="#767676"/>
          <rect width="15.9998" height="32" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 124.5 303.937)" fill="#CECECE"/>
          <rect width="15.9998" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 108.5 303.937)" fill="#B3B3B3"/>
          <rect width="16" height="32" transform="matrix(-4.37114e-08 1 1 4.37114e-08 92.5 303.937)" fill="#545454"/>
          <rect width="16" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 108.5 303.937)" fill="#6B6B6B"/>
          <rect width="16" height="32" transform="matrix(-4.37114e-08 1 1 4.37114e-08 92.5 271.938)" fill="#545454"/>
          <rect width="16" height="16" transform="matrix(-4.37114e-08 1 1 4.37114e-08 108.5 271.938)" fill="#6B6B6B"/>
          <rect width="15.9999" height="32" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 332.5 207.937)" fill="#A5A5A5"/>
          <rect width="15.9999" height="16" transform="matrix(1.31134e-07 -1 -1 -1.31134e-07 316.5 207.937)" fill="#9B9B9B"/>
        </svg>
      </div>`;
    }

    const background = `
    <div style="position: absolute; top: 0px; left: 0px;">
      <svg width="425" height="425" viewBox="0 0 425 425" fill="none" xmlns="http://www.w3.org/2000/svg">
        <rect width="425" height="425" fill="#201F27"/>
      </svg>
    </div>`;

    const htmlContent = background + svgContent;

    document.getElementById('b0asviewer').innerHTML = htmlContent;
  }


  function update() {
    const metadata = generateMetadata(inscInput, blockNumber);
    console.log('Generated Metadata:', metadata, inscInput, blockNumber);
    generateHtmlBasedOnBlockNumber(blockNumber, inscInput)
  }
</script>